openapi: 3.0.1
info:
  title: Alfresco Content Services REST API
  description: |
    **Core API**

    Provides access to the core features of Alfresco Content Services.
  version: "1"
servers:
- url: /alfresco/api/-default-/public/alfresco/versions/1
security:
- basicAuth: []
tags:
- name: audit
  description: Retrieve and clear audit entries
- name: actions
  description: Retrieve and execute actions
- name: activities
  description: Retrieve and manage activities
- name: comments
  description: Retrieve and manage comments
- name: downloads
  description: Create and manage downloads
- name: favorites
  description: Retrieve and manage favorites
- name: networks
  description: Retrieve and manage networks
- name: nodes
  description: Retrieve and manage nodes
- name: people
  description: Retrieve and manage people
- name: groups
  description: Retrieve and manage groups
- name: preferences
  description: Retrieve and manage preferences
- name: probes
  description: Check readiness and liveness of the repository
- name: queries
  description: "Find nodes, sites, and people using a simple search term"
- name: ratings
  description: Retrieve and manage ratings
- name: renditions
  description: Retrieve and manage file renditions
- name: shared-links
  description: Retrieve and manage public shared links
- name: sites
  description: Retrieve and manage sites
- name: tags
  description: Retrieve and manage tags
- name: trashcan
  description: Retrieve and manage deleted nodes
- name: versions
  description: Retrieve and manage versions
paths:
  /nodes/{nodeId}/comments:
    get:
      tags:
      - comments
      summary: List comments
      description: "Gets a list of comments for the node **nodeId**, sorted chronologically\
        \ with the newest comment first."
      operationId: listComments
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentPaging'
        "400":
          description: |
            Invalid parameter: **nodeId** exists but does not identify a file or a folder,
            or the value of **maxItems** is invalid, or the value of **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission read comments on the node
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - comments
      summary: Create a comment
      description: |
        Creates a comment on node **nodeId**. You specify the comment in a JSON body like this:

        ```JSON
        {
          "content": "This is a comment"
        }
        ```

        **Note:** You can create more than one comment by
        specifying a list of comments in the JSON body like this:

        ```JSON
        [
          {
            "content": "This is a comment"
          },
          {
            "content": "This is another comment"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createComment
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The comment text. Note that you can also provide a list of comments
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentBody'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntry'
        "400":
          description: |
            Invalid parameter: **commentBodyCreate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to create a comment
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "405":
          description: Cannot comment on a node of this type
          content: {}
        "409":
          description: |
            **nodeId** is locked and you are not the lock owner
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: commentBodyCreate
  /nodes/{nodeId}/comments/{commentId}:
    put:
      tags:
      - comments
      summary: Update a comment
      description: Updates an existing comment **commentId** on node **nodeId**.
      operationId: updateComment
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/commentIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The JSON representing the comment to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentBody'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentEntry'
        "400":
          description: |
            Invalid parameter: **commentBodyUpdate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to update a comment
          content: {}
        "404":
          description: |
            **nodeId** or **commentId** does not exist
          content: {}
        "409":
          description: |
            **nodeId** is locked and you are not the lock owner
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: commentBodyUpdate
    delete:
      tags:
      - comments
      summary: Delete a comment
      description: Deletes the comment **commentId** from node **nodeId**.
      operationId: deleteComment
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/commentIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to delete a comment
          content: {}
        "404":
          description: |
            **nodeId** or **commentId** does not exist
          content: {}
        "409":
          description: |
            **nodeId** is locked and you are not the lock owner
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /nodes/{nodeId}/ratings:
    get:
      tags:
      - ratings
      summary: List ratings
      description: Gets a list of ratings for node **nodeId**.
      operationId: listRatings
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - ratings
      summary: Create a rating
      description: Create a rating for the node with identifier **nodeId**
      operationId: createRating
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: |-
          For "myRating" the type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar

          For example, to "like" a file the following body would be used:

          ```JSON
            {
              "id": "likes",
              "myRating": true
            }
          ```
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingBody'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEntry'
        "400":
          description: |
            Invalid parameter: **ratingBodyCreate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "405":
          description: Cannot rate a node of this type
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: ratingBodyCreate
  /nodes/{nodeId}/ratings/{ratingId}:
    get:
      tags:
      - ratings
      summary: Get a rating
      description: Get the specific rating **ratingId** on node **nodeId**.
      operationId: getRating
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/ratingIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingEntry'
        "400":
          description: |
            Invalid parameter: unknown rating scheme specified
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - ratings
      summary: Delete a rating
      description: Deletes rating **ratingId** from node **nodeId**.
      operationId: deleteRating
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/ratingIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: unknown rating scheme specified
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /nodes/{nodeId}/tags:
    get:
      tags:
      - tags
      summary: List tags for a node
      description: Gets a list of tags for node **nodeId**.
      operationId: listTagsForNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to read tags on the node
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - tags
      summary: Create a tag for a node
      description: |
        Creates a tag on the node **nodeId**. You specify the tag in a JSON body like this:

        ```JSON
        {
          "tag":"test-tag-1"
        }
        ```

        **Note:** You can create more than one tag by
        specifying a list of tags in the JSON body like this:

        ```JSON
        [
          {
            "tag":"test-tag-1"
          },
          {
            "tag":"test-tag-2"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                 ...
                }
              }
            ]
          }
        }
        ```
      operationId: createTagForNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The new tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagBody'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagEntry'
        "400":
          description: |
            Invalid parameter: **tagBodyCreate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to create tags on the node
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "405":
          description: Cannot tag a node of this type
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: tagBodyCreate
  /nodes/{nodeId}/tags/{tagId}:
    delete:
      tags:
      - tags
      summary: Delete a tag from a node
      description: Deletes tag **tagId** from node **nodeId**.
      operationId: deleteTagFromNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/tagIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to delete the tag
          content: {}
        "404":
          description: |
            **nodeId** or **tagId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /nodes/{nodeId}:
    get:
      tags:
      - nodes
      summary: Get a node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Get information for node **nodeId**.

        You can use the **include** parameter to return additional information.
      operationId: getNode
      parameters:
      - $ref: '#/components/parameters/nodeIdWithAliasParam'
      - $ref: '#/components/parameters/nodeEntryIncludeParam'
      - name: relativePath
        in: query
        description: |
          A path relative to the **nodeId**. If you set this,
          information is returned on the node resolved by this path
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to retrieve **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    put:
      tags:
      - nodes
      summary: Update a node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Updates the node **nodeId**. For example, you can rename a file or folder:
        ```JSON
        {
          "name":"My new name"
        }
        ```
        You can also set or update one or more properties:
        ```JSON
        {
          "properties":
          {
            "cm:title":"Folder title"
          }
        }
        ```
        You can update multi-value properties of a node which supports properties of type multiple.
         ```JSON
        {
          "name":"My Other Folder",
          "nodeType":"custom:destination",
          "properties":
          {
            "cm:title":"Folder title",
            "cm:description":"This is an important folder",
            "custom:locations": [
                                 "location NewX",
                                 "location NewY"
                                ]
          }
        }
        ```

        **Note:** setting properties of type d:content and d:category are not supported.

        **Note:** if you want to add or remove aspects, then you must use **GET /nodes/{nodeId}** first to get the complete set of *aspectNames*.

        You can add (or remove) *locallySet* permissions, if any, in addition to any inherited permissions.
        You can also optionally disable (or re-enable) inherited permissions via *isInheritanceEnabled* flag:
        ```JSON
        {
          "permissions":
            {
              "isInheritanceEnabled": false,
              "locallySet":
                [
                  {"authorityId": "GROUP_special", "name": "Read", "accessStatus":"DENIED"},
                  {"authorityId": "testuser", "name": "Contributor", "accessStatus":"ALLOWED"}
                ]
            }
        }
        ```
        **Note:** if you want to add or remove locally set permissions then you must use **GET /nodes/{nodeId}** first to get the complete set of *locallySet* permissions.

        **Note:** Currently there is no optimistic locking for updates, so they are applied in "last one wins" order.
      operationId: updateNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/nodeEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The node information to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyUpdate'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
        "400":
          description: |
            Invalid parameter: the update request is invalid or **nodeId** is not a valid format or **nodeBodyUpdate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to update **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "409":
          description: Updated name clashes with an existing node in the current parent
            folder
          content: {}
        "422":
          description: Model integrity exception including a file name containing
            invalid characters
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: nodeBodyUpdate
    delete:
      tags:
      - nodes
      summary: Delete a node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Deletes the node **nodeId**.

        If **nodeId** is a folder, then its children are also deleted.

        Deleted nodes move to the trashcan unless the **permanent** query parameter is **true** and the current user is the owner of the node or an admin.

        Deleting a node deletes it from its primary parent and also from any secondary parents. Peer associations are also deleted, where the deleted
        node is either a source or target of an association. This applies recursively to any hierarchy of primary children of the deleted node.

        **Note:** If the node is not permanently deleted, and is later successfully restored to its former primary parent, then the primary
        child association is restored. This applies recursively for any primary children. No other secondary child associations or
        peer associations are restored for any of the nodes in the primary parent-child hierarchy of restored nodes, regardless of whether the original
        associations were to nodes inside or outside the restored hierarchy.
      operationId: deleteNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - name: permanent
        in: query
        description: |
          If **true** then the node is deleted permanently, without moving to the trashcan.
          Only the owner of the node or an admin can permanently delete the node
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to delete **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "409":
          description: |
            **nodeId** is locked and cannot be deleted
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/children:
    get:
      tags:
      - nodes
      summary: List node children
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of children of the parent node **nodeId**.

        Minimal information for each child is returned by default.

        You can use the **include** parameter to return additional information.

        The list of child nodes includes primary children and secondary children, if there are any.

        You can use the **include** parameter (include=association) to return child association details
        for each child, including the **assocTyp**e and the **isPrimary** flag.

        The default sort order for the returned list is for folders to be sorted before files, and by ascending name.

        You can override the default using **orderBy** to specify one or more fields to sort by. The default order is always ascending, but
        you can use an optional **ASC** or **DESC** modifier to specify an ascending or descending sort order.

        For example, specifying ```orderBy=name DESC``` returns a mixed folder/file list in descending **name** order.

        You can use any of the following fields to order the results:
        * isFolder
        * name
        * mimeType
        * nodeType
        * sizeInBytes
        * modifiedAt
        * createdAt
        * modifiedByUser
        * createdByUser
      operationId: listNodeChildren
      parameters:
      - $ref: '#/components/parameters/nodeIdWithAliasParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - name: where
        in: query
        description: |
          Optionally filter the list. Here are some examples:

          *   ```where=(isFolder=true)```

          *   ```where=(isFile=true)```

          *   ```where=(nodeType='my:specialNodeType')```

          *   ```where=(nodeType='my:specialNodeType INCLUDESUBTYPES')```

          *   ```where=(isPrimary=true)```

          *   ```where=(assocType='my:specialAssocType')```

          *   ```where=(isPrimary=false and assocType='my:specialAssocType')```
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/nodeMinimalEntryIncludeParam'
      - name: relativePath
        in: query
        description: Return information on children in the folder resolved by this
          path. The path is relative to **nodeId**
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: includeSource
        in: query
        description: "Also include **source** in addition to **entries** with folder\
          \ information on the parent node – either the specified parent **nodeId**,\
          \ or as resolved by **relativePath**"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeChildAssociationPaging'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, **nodeId** is not a folder or **orderBy** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to retrieve children
            of **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    post:
      tags:
      - nodes
      summary: Create a node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Create a node and add it as a primary child of node **nodeId**.

        This endpoint supports both JSON and multipart/form-data (file upload).

        **Using multipart/form-data**

        Use the **filedata** field to represent the content to upload, for example, the following curl command will
        create a node with the contents of test.txt in the test user's home folder.

        ```curl -utest:test -X POST host:port/alfresco/api/-default-/public/alfresco/versions/1/nodes/-my-/children -F filedata=@test.txt```

        You can use the **name** field to give an alternative name for the new file.

        You can use the **nodeType** field to create a specific type. The default is cm:content.

        You can use the **renditions** field to create renditions (e.g. doclib) asynchronously upon upload.
        Also, as requesting rendition is a background process,
        any rendition failure (e.g. No transformer is currently available) will not fail the whole upload and has the potential to silently fail.

        Use **overwrite** to overwrite an existing file, matched by name. If the file is versionable,
        the existing content is replaced.

        When you overwrite existing content, you can set the **majorVersion** boolean field to **true** to indicate a major version
        should be created. The default for **majorVersion** is **false**.
        Setting  **majorVersion** enables versioning of the node, if it is not already versioned.

        When you overwrite existing content, you can use the **comment** field to add a version comment that appears in the
        version history. This also enables versioning of this node, if it is not already versioned.

        You can set the **autoRename** boolean field to automatically resolve name clashes. If there is a name clash, then
        the API method tries to create a unique name using an integer suffix.

        You can use the **relativePath** field to specify the folder structure to create relative to the node **nodeId**.
        Folders in the **relativePath** that do not exist are created before the node is created.

        Any other field provided will be treated as a property to set on the newly created node.

        **Note:** setting properties of type d:content and d:category are not supported.

        **Note:** When creating a new node using multipart/form-data by default versioning is enabled and set to MAJOR Version.
        Since Alfresco 6.2.3 **versioningEnabled** flag was introduced offering better control over the new node Versioning.

        | **versioningEnabled** | **majorVersion** | **Version Type** |
        |-----------------------|------------------|------------------|
        |        unset          |        unset     |    MAJOR         |
        |        unset          |        true      |    MAJOR         |
        |        unset          |        false     |    MINOR         |
        |        true           |        unset     |    MAJOR         |
        |        true           |        true      |    MAJOR         |
        |        true           |        false     |    MINOR         |
        |        false          |        true      |    Unversioned   |
        |        false          |        false     |    Unversioned   |
        |        false          |        true      |    Unversioned   |
        <br>

        **Using JSON**

        You must specify at least a **name** and **nodeType**. For example, to create a folder:
        ```JSON
        {
          "name":"My Folder",
          "nodeType":"cm:folder"
        }
        ```

        You can create an empty file like this:
        ```JSON
        {
          "name":"My text file.txt",
          "nodeType":"cm:content"
        }
        ```
        You can update binary content using the ```PUT /nodes/{nodeId}``` API method.

        You can create a folder, or other node, inside a folder hierarchy:
        ```JSON
        {
          "name":"My Special Folder",
          "nodeType":"cm:folder",
          "relativePath":"X/Y/Z"
        }
        ```
        The **relativePath** specifies the folder structure to create relative to the node **nodeId**. Folders in the
        **relativePath** that do not exist are created before the node is created.

        You can set properties when you create a new node:
        ```JSON
        {
          "name":"My Other Folder",
          "nodeType":"cm:folder",
          "properties":
          {
            "cm:title":"Folder title",
            "cm:description":"This is an important folder"
          }
        }
        ```

        You can set multi-value properties when you create a new node which supports properties of type multiple.
         ```JSON
        {
          "name":"My Other Folder",
          "nodeType":"custom:destination",
          "properties":
          {
            "cm:title":"Folder title",
            "cm:description":"This is an important folder",
            "custom:locations": [
                                 "location X",
                                 "location Y"
                                ]
          }
        }
        ```

        Any missing aspects are applied automatically. For example, **cm:titled** in the JSON shown above. You can set aspects
        explicitly, if needed, using an **aspectNames** field.

        **Note:** setting properties of type d:content and d:category are not supported.

        You can also optionally disable (or enable) inherited permissions via *isInheritanceEnabled* flag:
        ```JSON
        {
          "permissions":
            {
              "isInheritanceEnabled": false,
              "locallySet":
                [
                  {"authorityId": "GROUP_special", "name": "Read", "accessStatus":"DENIED"},
                  {"authorityId": "testuser", "name": "Contributor", "accessStatus":"ALLOWED"}
                ]
            }
        }
        ```

        Typically, for files and folders, the primary children are created within the parent folder using the default "cm:contains" assocType.
        If the content model allows then it is also possible to create primary children with a different assoc type. For example:
        ```JSON
        {
          "name":"My Node",
          "nodeType":"my:specialNodeType",
          "association":
          {
            "assocType":"my:specialAssocType"
          }
        }
        ```

        Additional associations can be added after creating a node. You can also add associations at the time the node is created. This is
        required, for example, if the content model specifies that a node has mandatory associations to one or more existing nodes. You can optionally
        specify an array of **secondaryChildren** to create one or more secondary child associations, such that the newly created node acts as a parent node.
        You can optionally specify an array of **targets** to create one or more peer associations such that the newly created node acts as a source node.
        For example, to associate one or more secondary children at time of creation:
        ```JSON
        {
          "name":"My Folder",
          "nodeType":"cm:folder",
          "secondaryChildren":
            [ {"childId":"abcde-01234-...", "assocType":"my:specialChildAssocType"} ]
        }
        ```
        For example, to associate one or more targets at time of creation:
        ```JSON
        {
          "name":"My Folder",
          "nodeType":"cm:folder",
          "targets":
            [ {"targetId":"abcde-01234-...", "assocType":"my:specialPeerAssocType"} ]
        }
        ```

        **Note:** You can create more than one child by
        specifying a list of nodes in the JSON body. For example, the following JSON
        body creates two folders inside the specified **nodeId**, if the **nodeId** identifies
        a folder:

        ```JSON
        [
          {
            "name":"My Folder 1",
            "nodeType":"cm:folder"
          },
          {
            "name":"My Folder 2",
            "nodeType":"cm:folder"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
        **Note:** When creating a new node using JSON by default versioning is disabled.
        Since Alfresco 6.2.3 **versioningEnabled** flag was introduced offering better control over the new node Versioning.

        | **versioningEnabled** | **majorVersion** | **Version Type** |
        |-----------------------|------------------|------------------|
        |        unset          |        unset     |    Unversioned   |
        |        unset          |        true      |    MAJOR         |
        |        unset          |        false     |    MINOR         |
        |        true           |        unset     |    MAJOR         |
        |        true           |        true      |    MAJOR         |
        |        true           |        false     |    MINOR         |
        |        false          |        true      |    Unversioned   |
        |        false          |        false     |    Unversioned   |
        |        false          |        true      |    Unversioned   |
        <br>
      operationId: createNode
      parameters:
      - $ref: '#/components/parameters/nodeIdWithAliasParam'
      - name: autoRename
        in: query
        description: "If true, then  a name clash will cause an attempt to auto rename\
          \ by finding a unique name using an integer suffix"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: majorVersion
        in: query
        description: "If true, then created node will be version *1.0 MAJOR*. If false,\
          \ then created node will be version *0.1 MINOR*"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: versioningEnabled
        in: query
        description: "If true, then created node will be versioned. If false, then\
          \ created node will be unversioned and auto-versioning disabled"
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - $ref: '#/components/parameters/nodeEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The node information to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NodeBodyCreate'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format or **nodeBodyCreate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to create children of
            **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
          content: {}
        "409":
          description: New name clashes with an existing node in the current parent
            folder
          content: {}
        "413":
          description: Content exceeds individual file size limit configured for the
            network or system
          content: {}
        "415":
          description: Content Type is not supported
          content: {}
        "422":
          description: Model integrity exception including a file name containing
            invalid characters
          content: {}
        "507":
          description: Content exceeds overall storage quota limit configured for
            the network or system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: nodeBodyCreate
  /nodes/{nodeId}/copy:
    post:
      tags:
      - nodes
      summary: Copy a node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Copies the node **nodeId** to the parent folder node **targetParentId**. You specify the **targetParentId** in the request body.

        The new node has the same name as the source node unless you specify a new **name** in the request body.

        If the source **nodeId** is a folder, then all of its children are also copied.

        If the source **nodeId** is a file, it's properties, aspects and tags are copied, it's ratings, comments and locks are not.
      operationId: copyNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/nodeEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: "The targetParentId and, optionally, a new name which should\
          \ include the file\_extension"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyCopy'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format or **nodeBodyCopy** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to copy **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "409":
          description: New name clashes with an existing node in the destination parent
            folder
          content: {}
        "422":
          description: Model integrity exception including a file name containing
            invalid characters
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: nodeBodyCopy
  /nodes/{nodeId}/lock:
    post:
      tags:
      - nodes
      summary: Lock a node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Places a lock on node **nodeId**.

        **Note:** you can only lock files. More specifically, a node can only be locked if it is
        of type `cm:content` or a subtype of `cm:content`.

        The lock is owned by the current user, and prevents other users or processes from making updates to the node until the lock is released.

        If the **timeToExpire** is not set or is zero, then the lock never expires.  Otherwise, the **timeToExpire** is the number of seconds before the lock expires.

        When a lock expires, the lock is released.

        If the node is already locked, and the user is the lock owner, then the lock is renewed with the new **timeToExpire**.

        By default, a lock is applied that allows the owner to update or delete the node.
        You can use **type** to change the lock type to one of the following:
        * **ALLOW_OWNER_CHANGES** (default) changes to the node can be made only by the lock owner. This enum is the same value as the deprecated WRITE_LOCK described in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API. This is the default value.
        * **FULL** no changes by any user are allowed. This enum is the same value as the deprecated READ_ONLY_LOCK described in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API.

        By default, a lock is persisted in the database. You can create a volatile in-memory lock by setting the **lifetime** property to EPHEMERAL.
        You might choose use EPHEMERAL locks, for example, if you are taking frequent short-term locks that you don't need
        to be kept over a restart of the repository. In this case you don't need the
        overhead of writing the locks to the database.

        If a lock on the node cannot be taken, then an error is returned.
      operationId: lockNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/nodeEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: Lock details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyLock'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or **nodeBodyLock** is invalid,
            or a lock was attempted on a node that is not a file
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: |
            Current user does not have permission to lock **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "422":
          description: |
            **nodeId** could not be locked
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: nodeBodyLock
  /nodes/{nodeId}/unlock:
    post:
      tags:
      - nodes
      summary: Unlock a node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Deletes a lock on node **nodeId**.

        The current user must be the owner of the locks or have admin rights, otherwise an error is returned.

        If a lock on the node cannot be released, then an error is returned.
      operationId: unlockNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/nodeEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: |
            Current user does not have permission to unlock **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "422":
          description: |
            **nodeId** could not be unlocked
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/move:
    post:
      tags:
      - nodes
      summary: Move a node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Move the node **nodeId** to the parent folder node **targetParentId**.

        The **targetParentId** is specified in the in request body.

        The moved node retains its name unless you specify a new **name** in the request body.

        If the source **nodeId** is a folder, then its children are also moved.

        The move will effectively change the primary parent.
      operationId: moveNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/nodeEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: "The targetParentId and, optionally, a new name which should\
          \ include the file\_extension"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeBodyMove'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or **targetParentId** is not a folder,
            or **nodeBodyMove** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to move **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "409":
          description: New name clashes with an existing node in the destination parent
            folder
          content: {}
        "422":
          description: Model integrity exception including a file name containing
            invalid characters
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: nodeBodyMove
  /nodes/{nodeId}/content:
    get:
      tags:
      - nodes
      summary: Get node content
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the content of the node with identifier **nodeId**.
      operationId: getNodeContent
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/attachmentParam'
      - $ref: '#/components/parameters/ifModifiedSinceHeader'
      - $ref: '#/components/parameters/RangeHeader'
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
          content: {}
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to retrieve content of
            **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "416":
          description: |
            Range Not Satisfiable
          content: {}
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    put:
      tags:
      - nodes
      summary: Update node content
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Updates the content of the node with identifier **nodeId**.

        The request body for this endpoint can be any text or binary stream.

        The **majorVersion** and **comment** parameters can be used to control versioning behaviour. If the content is versionable,
        a new minor version is created by default.

        Optionally a new **name** parameter can also be specified that must be unique within the parent folder. If specified and valid then this
        will rename the node. If invalid then an error is returned and the content is not updated.

        **Note:** This API method accepts any content type, but for testing with this tool text based content can be provided.
        This is because the OpenAPI Specification does not allow a wildcard to be provided or the ability for
        tooling to accept an arbitrary file.
      operationId: updateNodeContent
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - name: majorVersion
        in: query
        description: |
          If **true**, create a major version.
          Setting this parameter also enables versioning of this node, if it is not already versioned
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: comment
        in: query
        description: |
          Add a version comment which will appear in version history.
          Setting this parameter also enables versioning of this node, if it is not already versioned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: |
          Optional new name. This should include the file extension.
          The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
          The character `.` must not be used at the end of the name
        required: false
        style: form
        explode: true
        schema:
          pattern: "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[\
            \ ]+$))"
          type: string
      - $ref: '#/components/parameters/nodeEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The binary content
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to update **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "409":
          description: Optional new name clashes with an existing node in the current
            parent folder
          content: {}
        "413":
          description: Content exceeds individual file size limit (configured for
            network/system)
          content: {}
        "422":
          description: Model integrity exception including a file name containing
            invalid characters
          content: {}
        "507":
          description: Content exceeds overall storage quota limit configured for
            the network/system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: contentBodyUpdate
  /nodes/{nodeId}/renditions:
    get:
      tags:
      - renditions
      summary: List renditions
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.

        Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.

        You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**
        clause will return just the CREATED renditions:

        ```
        (status='CREATED')
        ```
      operationId: listRenditions
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/whereParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionPaging'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    post:
      tags:
      - renditions
      summary: Create rendition
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        An asynchronous request to create a rendition for file **nodeId**.

        The rendition is specified by name **id** in the request body:
        ```JSON
        {
          "id":"doclib"
        }
        ```
         Multiple names may be specified as a comma separated list or using a list format:
        ```JSON
        [
          {
             "id": "doclib"
          },
          {
             "id": "avatar"
          }
        ]
        ```
      operationId: createRendition
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      requestBody:
        description: The rendition "id"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenditionBodyCreate'
        required: true
      responses:
        "202":
          description: Request accepted
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format or is not a file
            or **renditionBodyCreate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
          content: {}
        "409":
          description: All requested renditions already exist
          content: {}
        "501":
          description: Renditions/thumbnails are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: renditionBodyCreate
  /nodes/{nodeId}/renditions/{renditionId}:
    get:
      tags:
      - renditions
      summary: Get rendition information
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition information for **renditionId** of file **nodeId**.
      operationId: getRendition
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/renditionIdParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/renditions/{renditionId}/content:
    get:
      tags:
      - renditions
      summary: Get rendition content
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition content for **renditionId** of file **nodeId**.
      operationId: getRenditionContent
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/renditionIdParam'
      - $ref: '#/components/parameters/attachmentParam'
      - $ref: '#/components/parameters/ifModifiedSinceHeader'
      - $ref: '#/components/parameters/RangeHeader'
      - name: placeholder
        in: query
        description: |
          If **true** and there is no rendition for this **nodeId** and **renditionId**,
          then the placeholder image for the mime type of this rendition is returned, rather
          than a 404 response
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
          content: {}
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
          content: {}
        "416":
          description: Range Not Satisfiable
          content: {}
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/secondary-children:
    get:
      tags:
      - nodes
      summary: List secondary children
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of secondary child nodes that are associated with the current parent **nodeId**, via a secondary child association.
      operationId: listSecondaryChildren
      parameters:
      - $ref: '#/components/parameters/nodeParentIdWithAliasParam'
      - name: where
        in: query
        description: |
          Optionally filter the list by assocType. Here's an example:

          *   ```where=(assocType='my:specialAssocType')```
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/nodeAssocMinimalEntryIncludeParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/includeSourceParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeChildAssociationPaging'
        "400":
          description: |
            Invalid parameter: **assocType** is unknown or the **nodeId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: Parent **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    post:
      tags:
      - nodes
      summary: Create secondary child
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Create a secondary child association, with the given association type, between the parent **nodeId** and a child node.

        **Note:** You can create more than one secondary child association by
        specifying a list of associations in the JSON body like this:

        ```JSON
        [
          {
            "childId": "string",
            "assocType": "string"
          },
          {
            "childId": "string",
            "assocType": "string"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createSecondaryChildAssociation
      parameters:
      - $ref: '#/components/parameters/nodeParentIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The child node id and assoc type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChildAssociationBody'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildAssociationEntry'
        "400":
          description: |
            Invalid parameter: **assocType** is unknown, or the **nodeId** is not a valid format,
            or **secondaryChildAssociationBodyCreate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to create secondary children
            of **nodeId**
          content: {}
        "404":
          description: Parent **nodeId** or **childId** does not exist
          content: {}
        "409":
          description: An association of this assoc type already exists between these
            two nodes
          content: {}
        "422":
          description: Model integrity exception
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: secondaryChildAssociationBodyCreate
  /nodes/{nodeId}/secondary-children/{childId}:
    delete:
      tags:
      - nodes
      summary: Delete secondary child or children
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Delete secondary child associations between the parent **nodeId** and child nodes for the given association type.

        If the association type is **not** specified, then all secondary child associations, of any type in the direction
        from parent to secondary child, will be deleted. The child will still have a primary parent and may still be
        associated as a secondary child with other secondary parents.
      operationId: deleteSecondaryChildAssociation
      parameters:
      - $ref: '#/components/parameters/nodeParentIdParam'
      - name: childId
        in: path
        description: The identifier of a child node
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: assocType
        in: query
        description: Only delete associations of this type
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **assocType** is unknown or you are trying to delete a primary **assocType**.
            Use delete node instead
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: "Parent **nodeId** or **childId** does not exist (with given\
            \ assocType, if specified)"
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/parents:
    get:
      tags:
      - nodes
      summary: List parents
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of parent nodes that are associated with the current child **nodeId**.

        The list includes both the primary parent and any secondary parents.
      operationId: listParents
      parameters:
      - $ref: '#/components/parameters/nodeChildIdWithAliasParam'
      - name: where
        in: query
        description: |
          Optionally filter the list by **assocType** and/or **isPrimary**. Here are some example filters:

          *   ```where=(assocType='my:specialAssocType')```

          *   ```where=(isPrimary=true)```

          *   ```where=(isPrimary=false and assocType='my:specialAssocType')```
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/nodeAssocMinimalEntryIncludeParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/includeSourceParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAssociationPaging'
        "400":
          description: |
            Invalid parameter: **assocType** is unknown or the **nodeId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: Child **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/targets:
    get:
      tags:
      - nodes
      summary: List target associations
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of target nodes that are associated with the current source **nodeId**.
      operationId: listTargetAssociations
      parameters:
      - $ref: '#/components/parameters/nodeSourceIdParam'
      - name: where
        in: query
        description: |
          Optionally filter the list by **assocType**. Here's an example:

          *   ```where=(assocType='my:specialAssocType')```
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/nodeAssocMinimalEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAssociationPaging'
        "400":
          description: |
            Invalid parameter: **assocType** is unknown or the **nodeId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: Source **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    post:
      tags:
      - nodes
      summary: Create node association
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Create an association, with the given association type, between the source **nodeId** and a target node.

        **Note:** You can create more than one association by
        specifying a list of associations in the JSON body like this:

        ```JSON
        [
          {
             "targetId": "string",
             "assocType": "string"
          },
          {
            "targetId": "string",
            "assocType": "string"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createAssociation
      parameters:
      - $ref: '#/components/parameters/nodeSourceIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The target node id and assoc type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationBody'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociationEntry'
        "400":
          description: |
            Invalid parameter: **assocType** is unknown, or the **nodeId** is not a valid format,
            or **associationBodyCreate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: Source **nodeId** or **targetId** does not exist
          content: {}
        "409":
          description: An association of this assoc type already exists between these
            two nodes
          content: {}
        "422":
          description: Model integrity exception
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: associationBodyCreate
  /nodes/{nodeId}/targets/{targetId}:
    delete:
      tags:
      - nodes
      summary: Delete node association(s)
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Delete an association, or associations, from the source **nodeId* to a target node for the given association type.

        If the association type is **not** specified, then all peer associations, of any type, in the direction
        from source to target, are deleted.

        **Note:** After removal of the peer association, or associations, from source to target, the two nodes may still have peer associations
        in the other direction.
      operationId: deleteAssociation
      parameters:
      - $ref: '#/components/parameters/nodeSourceIdParam'
      - name: targetId
        in: path
        description: The identifier of a target node
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: assocType
        in: query
        description: Only delete associations of this type
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **assocType** is unknown, or the **nodeId** is not a valid format, or **targetId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: "Source **nodeId** or **targetId** does not exist (with given\
            \ assocType, if specified)"
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/sources:
    get:
      tags:
      - nodes
      summary: List source associations
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of source nodes that are associated with the current target **nodeId**.
      operationId: listSourceAssociations
      parameters:
      - $ref: '#/components/parameters/nodeTargetIdParam'
      - name: where
        in: query
        description: |
          Optionally filter the list by **assocType**. Here's an example:

          *   ```where=(assocType='my:specialAssocType')```
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/nodeAssocMinimalEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeAssociationPaging'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format or **assocType** is unknown
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: Target **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/versions:
    get:
      tags:
      - versions
      summary: List version history
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the version history as an ordered list of versions for the specified **nodeId**.

        The list is ordered in descending modified order. So the most recent version is first and
        the original version is last in the list.
      operationId: listVersionHistory
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/versionMinimalEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionPaging'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: Target **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/versions/{versionId}:
    get:
      tags:
      - versions
      summary: Get version information
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the version information for **versionId** of file node **nodeId**.
      operationId: getVersion
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/versionIdParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **versionId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    delete:
      tags:
      - versions
      summary: Delete a version
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Delete the version identified by **versionId** and **nodeId*.

        If the version is successfully deleted then the content and metadata for that versioned node
        will be deleted and will no longer appear in the version history. This operation cannot be undone.

        If the most recent version is deleted the live node will revert to the next most recent version.

        We currently do not allow the last version to be deleted. If you wish to clear the history then you
        can remove the "cm:versionable" aspect (via update node) which will also disable versioning. In this
        case, you can re-enable versioning by adding back the "cm:versionable" aspect or using the version
        params (majorVersion and comment) on a subsequent file content update.
      operationId: deleteVersion
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/versionIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or exists but does not identify a file, or **versionId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to delete the versioned
            node
          content: {}
        "404":
          description: |
            **nodeId** or **versionId** does not exist
          content: {}
        "422":
          description: Cannot delete the last remaining version
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/versions/{versionId}/content:
    get:
      tags:
      - versions
      summary: Get version content
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the version content for **versionId** of file node **nodeId**.
      operationId: getVersionContent
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/versionIdParam'
      - $ref: '#/components/parameters/attachmentParam'
      - $ref: '#/components/parameters/ifModifiedSinceHeader'
      - $ref: '#/components/parameters/RangeHeader'
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
          content: {}
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **versionId** does not exist
          content: {}
        "416":
          description: Range Not Satisfiable
          content: {}
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /nodes/{nodeId}/versions/{versionId}/revert:
    post:
      tags:
      - versions
      summary: Revert a version
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Attempts to revert the version identified by **versionId** and **nodeId** to the live node.

        If the node is successfully reverted then the content and metadata for that versioned node
        will be promoted to the live node and a new version will appear in the version history.
      operationId: revertVersion
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/versionIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: "Optionally, specify a version comment and whether this should\
          \ be a major version, or not"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevertBody'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or it exists
            but does not identify a file, or **versionId** is invalid,
            or **revertBody** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to revert the versioned
            node
          content: {}
        "404":
          description: |
            **nodeId** or **versionId** does not exist
          content: {}
        "422":
          description: Model integrity exception trying to revert the node
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: revertBody
  /nodes/{nodeId}/versions/{versionId}/renditions:
    get:
      tags:
      - versions
      summary: List renditions for a file version
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Gets a list of the rendition information for each rendition of the version of file **nodeId** and **versionId**, including the rendition id.

        Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.

        You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**
        clause will return just the CREATED renditions:

        ```
        (status='CREATED')
        ```
      operationId: listVersionRenditions
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/versionIdParam'
      - $ref: '#/components/parameters/whereParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionPaging'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **where** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **versionId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 7.0.0
    post:
      tags:
      - versions
      summary: Create rendition for a file version
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        An asynchronous request to create a rendition for version of file **nodeId** and **versionId**.

        The version rendition is specified by name **id** in the request body:
        ```JSON
        {
          "id":"doclib"
        }
        ```
          Multiple names may be specified as a comma separated list or using a list format:
        ```JSON
        [
          {
              "id": "doclib"
          },
          {
              "id": "avatar"
          }
        ]
        ```
      operationId: createVersionRendition
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/versionIdParam'
      requestBody:
        description: The rendition "id"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenditionBodyCreate'
        required: true
      responses:
        "202":
          description: Request accepted
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid,
            or **renditionBodyCreate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **versionId** or **renditionId** does not exist
          content: {}
        "409":
          description: All requested renditions already exist
          content: {}
        "501":
          description: Renditions/thumbnails are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 7.0.0
      x-codegen-request-body-name: renditionBodyCreate
  /nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}:
    get:
      tags:
      - versions
      summary: Get rendition information for a file version
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Gets the rendition information for **renditionId** of version of file **nodeId** and **versionId**.
      operationId: getVersionRendition
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/versionIdParam'
      - $ref: '#/components/parameters/renditionIdParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **versionId** or **renditionId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 7.0.0
  /nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}/content:
    get:
      tags:
      - versions
      summary: Get rendition content for a file version
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Gets the rendition content for **renditionId** of version of file **nodeId** and **versionId**.
      operationId: getVersionRenditionContent
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/versionIdParam'
      - $ref: '#/components/parameters/renditionIdParam'
      - $ref: '#/components/parameters/attachmentParam'
      - $ref: '#/components/parameters/ifModifiedSinceHeader'
      - $ref: '#/components/parameters/RangeHeader'
      - name: placeholder
        in: query
        description: |
          If **true** and there is no rendition for this **nodeId** and **renditionId**,
          then the placeholder image for the mime type of this rendition is returned, rather
          than a 404 response
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
          content: {}
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **versionId** or **renditionId** does not exist
          content: {}
        "416":
          description: Range Not Satisfiable
          content: {}
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 7.0.0
  /nodes/{nodeId}/action-definitions:
    get:
      tags:
      - actions
      summary: Retrieve actions for a node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Retrieve the list of actions that may be executed against the given **nodeId**.

        The default sort order for the returned list is for actions to be sorted by ascending name.
        You can override the default by using the **orderBy** parameter.

        You can use any of the following fields to order the results:
        * name
        * title
      operationId: nodeActions
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDefinitionList'
        "400":
          description: |
            Invalid parameter: value of **maxItems**, **skipCount** or **orderBy** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
      x-alfresco-since: 5.2.2
  /deleted-nodes:
    get:
      tags:
      - trashcan
      summary: List deleted nodes
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of deleted nodes for the current user.

        If the current user is an administrator deleted nodes for all users will be returned.

        The list of deleted nodes will be ordered with the most recently deleted node at the top of the list.
      operationId: listDeletedNodes
      parameters:
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/nodeMinimalEntryIncludeParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedNodesPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /deleted-nodes/{nodeId}:
    get:
      tags:
      - trashcan
      summary: Get a deleted node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the specific deleted node **nodeId**.
      operationId: getDeletedNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/nodeEntryIncludeParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedNodeEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to view the deleted node
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    delete:
      tags:
      - trashcan
      summary: Permanently delete a deleted node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Permanently deletes the deleted node **nodeId**.
      operationId: deleteDeletedNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to permanently delete the deleted
            node
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /deleted-nodes/{nodeId}/content:
    get:
      tags:
      - trashcan
      summary: Get deleted node content
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the content of the deleted node with identifier **nodeId**.
      operationId: getDeletedNodeContent
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/attachmentParam'
      - $ref: '#/components/parameters/ifModifiedSinceHeader'
      - $ref: '#/components/parameters/RangeHeader'
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
          content: {}
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to retrieve content of
            **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "416":
          description: Range Not Satisfiable
          content: {}
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /deleted-nodes/{nodeId}/restore:
    post:
      tags:
      - trashcan
      summary: Restore a deleted node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Attempts to restore the deleted node **nodeId** to its original location or to a new location.

        If the node is successfully restored to its former primary parent, then only the
        primary child association will be restored, including recursively for any primary
        children. It should be noted that no other secondary child associations or peer
        associations will be restored, for any of the nodes within the primary parent-child
        hierarchy of restored nodes, irrespective of whether these associations were to
        nodes within or outside of the restored hierarchy.

        Also, any previously shared link will not be restored since it is deleted at the time
        of delete of each node.
      operationId: restoreDeletedNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The targetParentId if the node is restored to a new location
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletedNodeBodyRestore'
        required: false
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** or **targetNodeId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to restore the deleted node or
            user does not have permission to the target node
          content: {}
        "404":
          description: |
            **nodeId** does not exist or the restore destination parent node does not exists
          content: {}
        "409":
          description: Node name already exists in the restore destination
          content: {}
        "422":
          description: Model integrity exception trying to restore the node
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: deletedNodeBodyRestore
  /deleted-nodes/{nodeId}/renditions:
    get:
      tags:
      - trashcan
      summary: List renditions for a deleted node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of the rendition information for each rendition of the file **nodeId**, including the rendition id.

        Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.

        You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**
        clause will return just the CREATED renditions:

        ```
        (status='CREATED')
        ```
      operationId: listDeletedNodeRenditions
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/whereParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionPaging'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /deleted-nodes/{nodeId}/renditions/{renditionId}:
    get:
      tags:
      - trashcan
      summary: Get rendition information for a deleted node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition information for **renditionId** of file **nodeId**.
      operationId: getArchivedNodeRendition
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/renditionIdParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /deleted-nodes/{nodeId}/renditions/{renditionId}/content:
    get:
      tags:
      - trashcan
      summary: Get rendition content of a deleted node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition content for **renditionId** of file **nodeId**.
      operationId: getArchivedNodeRenditionContent
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/renditionIdParam'
      - $ref: '#/components/parameters/attachmentParam'
      - $ref: '#/components/parameters/ifModifiedSinceHeader'
      - $ref: '#/components/parameters/RangeHeader'
      - name: placeholder
        in: query
        description: |
          If **true** and there is no rendition for this **nodeId** and **renditionId**,
          then the placeholder image for the mime type of this rendition is returned, rather
          than a 404 response
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
          content: {}
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
          content: {}
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission for **nodeId**
          content: {}
        "404":
          description: |
            **nodeId** or **renditionId** does not exist
          content: {}
        "416":
          description: Range Not Satisfiable
          content: {}
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /downloads:
    post:
      tags:
      - downloads
      summary: Create a new download
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Creates a new download node asynchronously, the content of which will be the zipped content of the **nodeIds** specified in the JSON body like this:

        ```JSON
        {
            "nodeIds":
             [
               "c8bb482a-ff3c-4704-a3a3-de1c83ccd84c",
               "cffa62db-aa01-493d-9594-058bc058eeb1"
             ]
        }
        ```

        **Note:** The content of the download node can be obtained using the **GET /nodes/{downloadId}/content** endpoint
      operationId: createDownload
      parameters:
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: "The nodeIds the content of which will be zipped, which zip will\
          \ be set as the content of our download node"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadBodyCreate'
        required: true
      responses:
        "202":
          description: The request to create a download node was accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadEntry'
        "400":
          description: |
            Invalid parameter: **DownloadBodyCreate** is invalid due to incorrect syntax, or **nodeIds** is empty, or **nodeIds** contains a duplicate **nodeId**
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to add a certain **nodeId**
            to the zip
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: DownloadBodyCreate
  /downloads/{downloadId}:
    get:
      tags:
      - downloads
      summary: Get a download
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Retrieve status information for download node **downloadId**
      operationId: getDownload
      parameters:
      - $ref: '#/components/parameters/downloadIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Download node information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadEntry'
        "400":
          description: |
            Invalid parameter: **downloadId** is invalid, or **downloadId** does not point to a node of download type
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to get information about
            **downloadId** node
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
    delete:
      tags:
      - downloads
      summary: Cancel a download
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Cancels the creation of a download request.

        **Note:** The download node can be deleted using the **DELETE /nodes/{downloadId}** endpoint

        By default, if the download node is not deleted it will be picked up by a cleaner job which removes download nodes older than a configurable amount of time (default is 1 hour)

        Information about the existing progress at the time of cancelling can be retrieved by calling the **GET /downloads/{downloadId}** endpoint

        The cancel operation is done asynchronously.
      operationId: cancelDownload
      parameters:
      - $ref: '#/components/parameters/downloadIdParam'
      responses:
        "202":
          description: The request to cancel a download was accepted
          content: {}
        "400":
          description: |
            Invalid parameter: **downloadId** is invalid, or **downloadId** does not point to a node of download type
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission cancel the **downloadId**
            node
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
  /people:
    get:
      tags:
      - people
      summary: List people
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        List people.

        You can use the **include** parameter to return any additional information.

        The default sort order for the returned list is for people to be sorted by ascending id.
        You can override the default by using the **orderBy** parameter.

        You can use any of the following fields to order the results:
        * id
        * firstName
        * lastName
      operationId: listPeople
      parameters:
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/personMinimalEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems**, **skipCount** or **orderBy** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    post:
      tags:
      - people
      summary: Create person
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Create a person.

        If applicable, the given person's login access can also be optionally disabled.

        You must have admin rights to create a person.

        You can set custom properties when you create a person:
        ```JSON
        {
          "id": "abeecher",
          "firstName": "Alice",
          "lastName": "Beecher",
          "displayName": "Alice Beecher",
          "email": "abeecher@example.com",
          "password": "secret",
          "properties":
          {
            "my:property": "The value"
          }
        }
        ```
        **Note:** setting properties of type d:content and d:category are not supported.
      operationId: createPerson
      parameters:
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The person details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonBodyCreate'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonEntry'
        "400":
          description: |
            Invalid parameter: **personBodyCreate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to create a person
          content: {}
        "409":
          description: Person within given *id* already exists
          content: {}
        "422":
          description: Model integrity exception
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: personBodyCreate
  /people/{personId}:
    get:
      tags:
      - people
      summary: Get a person
      description: |
        Gets information for the person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - people
      summary: Update person
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Update the given person's details.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        If applicable, the given person's login access can also be optionally disabled or re-enabled.

        You must have admin rights to update a person — unless updating your own details.

        If you are changing your password, as a non-admin user, then the existing password must also
        be supplied (using the oldPassword field in addition to the new password value).

        Admin users cannot be disabled by setting enabled to false.

        Non-admin users may not disable themselves.

        You can set custom properties when you update a person:
        ```JSON
        {
          "firstName": "Alice",
          "properties":
          {
            "my:property": "The value"
          }
        }
        ```
        **Note:** setting properties of type d:content and d:category are not supported.
      operationId: updatePerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The person details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonBodyUpdate'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonEntry'
        "400":
          description: |
            Invalid parameter: the update request is invalid or **personId** is not a valid format or **personBodyUpdate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to update a person
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        "422":
          description: Model integrity exception
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: personBodyUpdate
  /people/{personId}/activities:
    get:
      tags:
      - activities
      summary: List activities
      description: |
        Gets a list of activities for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listActivitiesForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - name: who
        in: query
        description: |
          A filter to include the user's activities only `me`, other user's activities only `others`'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: siteId
        in: query
        description: Include only activity feed entries relating to this site
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, or **who** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have access to the activities for **personId**
          content: {}
        "404":
          description: |
            **personId** or **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{personId}/favorite-sites:
    get:
      tags:
      - favorites
      summary: List favorite sites
      description: |
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.
        Use `/people/{personId}/favorites` instead.

        Gets a list of a person's favorite sites.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listFavoriteSitesForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitePaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have access to the favorite sites for
            **personId**
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: true
    post:
      tags:
      - favorites
      summary: Create a site favorite
      description: |
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.
        Use `/people/{personId}/favorites` instead.

        Create a site favorite for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

         **Note:** You can favorite more than one site by
        specifying a list of sites in the JSON body like this:

        ```JSON
        [
          {
            "id": "test-site-1"
          },
          {
            "id": "test-site-2"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createSiteFavorite
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The id of the site to favorite
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteSiteBodyCreate'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteSiteEntry'
        "400":
          description: |
            Invalid parameter: **favoriteSiteBodyCreate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have access to the favorite sites for
            **personId**
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        "409":
          description: |
            **id** is already a site favorite
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: true
      x-codegen-request-body-name: favoriteSiteBodyCreate
  /people/{personId}/favorite-sites/{siteId}:
    get:
      tags:
      - favorites
      summary: Get a favorite site
      description: |
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.
        Use `/people/{personId}/favorites/{favoriteId}` instead.

        Gets information on favorite site **siteId** of person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getFavoriteSite
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have access to the favorite sites for
            **personId**
          content: {}
        "404":
          description: |
            **personId** or **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: true
    delete:
      tags:
      - favorites
      summary: Delete a site favorite
      description: |
        **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.
        Use `/people/{personId}/favorites/{favoriteId}` instead.

        Deletes site **siteId** from the favorite site list of person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteFavorite
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/siteIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have access to the favorite sites for
            **personId**
          content: {}
        "404":
          description: |
            **personId** or **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: true
  /people/{personId}/favorites:
    get:
      tags:
      - favorites
      summary: List favorites
      description: |
        Gets a list of favorites for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        The default sort order for the returned list of favorites is type ascending, createdAt descending.
        You can override the default by using the **orderBy** parameter.

        You can use any of the following fields to order the results:
        *   `type`
        *   `createdAt`
        *   `title`

        You can use the **where** parameter to restrict the list in the response
        to entries of a specific kind. The **where** parameter takes a value.
        The value is a single predicate that can include one or more **EXISTS**
        conditions. The **EXISTS** condition uses a single operand to limit the
        list to include entries that include that one property. The property values are:

        *   `target/file`
        *   `target/folder`
        *   `target/site`

        For example, the following **where** parameter restricts the returned list to the file favorites for a person:

        ```SQL
        (EXISTS(target/file))
        ```
        You can specify more than one condition using **OR**. The predicate must be enclosed in parentheses.


        For example, the following **where** parameter restricts the returned list to the file and folder favorites for a person:

        ```SQL
        (EXISTS(target/file) OR EXISTS(target/folder))
        ```
      operationId: listFavorites
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/whereParam'
      - $ref: '#/components/parameters/favoriteEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritePaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** does not exist or the current user does not have permission to access the favorites of **personId**
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - favorites
      summary: Create a favorite
      description: |
        Favorite a **site**, **file**, or **folder** in the repository.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        **Note:** You can favorite more than one entity by
        specifying a list of objects in the JSON body like this:

        ```JSON
        [
          {
               "target": {
                  "file": {
                     "guid": "abcde-01234-...."
                  }
               }
           },
           {
               "target": {
                  "file": {
                     "guid": "abcde-09863-...."
                  }
               }
           },
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createFavorite
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/favoriteEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: |-
          An object identifying the entity to be favorited

          The object consists of a single property which is an object with the name `site`, `file`, or `folder`.
          The content of that object is the `guid` of the target entity.

          For example, to favorite a file the following body would be used:

          ```JSON
          {
             "target": {
                "file": {
                   "guid": "abcde-01234-...."
                }
             }
          }
          ```
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteBodyCreate'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteEntry'
        "400":
          description: |
            Invalid parameter: **favoriteBodyCreate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** does not exist, or the target entity does not exist,
            or a favorite already exists with the specified id, or an
            entity exists with the id of the posted object
            but is not of the same type of the posted object
          content: {}
        "409":
          description: The target **guid** has already been favorited
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: favoriteBodyCreate
  /people/{personId}/favorites/{favoriteId}:
    get:
      tags:
      - favorites
      summary: Get a favorite
      description: |
        Gets favorite **favoriteId** for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getFavorite
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/favoriteIdParam'
      - $ref: '#/components/parameters/favoriteEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** or **favoriteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - favorites
      summary: Delete a favorite
      description: |
        Deletes **favoriteId** as a favorite of person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteFavorite
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/favoriteIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** or **favoriteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{personId}/networks:
    get:
      tags:
      - networks
      summary: List network membership
      description: |
        Gets a list of network memberships for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listNetworksForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonNetworkPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{personId}/networks/{networkId}:
    get:
      tags:
      - networks
      summary: Get network information
      description: |
        Gets network information on a single network specified by **networkId** for **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getNetworkForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/networkIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonNetworkEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** or **networkId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{personId}/preferences:
    get:
      tags:
      - preferences
      summary: List preferences
      description: |
        Gets a list of preferences for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
        Note that each preference consists of an **id** and a **value**.

        The **value** can be of any JSON type.
      operationId: listPreferences
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferencePaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have access to the preferences for **personId**
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{personId}/preferences/{preferenceName}:
    get:
      tags:
      - preferences
      summary: Get a preference
      description: |
        Gets a specific preference for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getPreference
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - name: preferenceName
        in: path
        description: The name of the preference
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceEntry'
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have access to the preferences for **personId**
          content: {}
        "404":
          description: |
            **personId** or **preferenceName** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{personId}/site-membership-requests:
    get:
      tags:
      - sites
      summary: List site membership requests
      description: |
        Gets a list of the current site membership requests for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: listSiteMembershipRequestsForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - sites
      summary: Create a site membership request
      description: |
        Create a site membership request for yourself on the site with the identifier of **id**, specified in the JSON body.
        The result of the request differs depending on the type of site.

        * For a **public** site, you join the site immediately as a SiteConsumer.
        * For a **moderated** site, your request is added to the site membership request list. The request waits for approval from the Site Manager.
        * You cannot request membership of a **private** site. Members are invited by the site administrator.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

         **Note:** You can create site membership requests for more than one site by
        specifying a list of sites in the JSON body like this:

        ```JSON
        [
          {
            "message": "Please can you add me",
            "id": "test-site-1",
            "title": "Request for test site 1",
          },
          {
            "message": "Please can you add me",
            "id": "test-site-2",
            "title": "Request for test site 2",
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createSiteMembershipRequestForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: Site membership request details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipRequestBodyCreate'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestEntry'
        "400":
          description: |
            Invalid parameter: **id** is invalid, or the user is already invited,
            or **siteMembershipRequestBodyCreate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** or **id** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: siteMembershipRequestBodyCreate
  /people/{personId}/site-membership-requests/{siteId}:
    get:
      tags:
      - sites
      summary: Get a site membership request
      description: |
        Gets the site membership request for site **siteId** for person **personId**, if one exists.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getSiteMembershipRequestForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** or **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - sites
      summary: Update a site membership request
      description: |
        Updates the message for the site membership request to site **siteId** for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: updateSiteMembershipRequestForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The new message to display
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipRequestBodyUpdate'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestEntry'
        "400":
          description: |
            Invalid parameter: **id** is invalid
            or **siteMembershipRequestBodyUpdate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** or **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: siteMembershipRequestBodyUpdate
    delete:
      tags:
      - sites
      summary: Delete a site membership request
      description: |
        Deletes the site membership request to site **siteId** for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteMembershipRequestForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/siteIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** or **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{personId}/sites:
    get:
      tags:
      - sites
      summary: List site memberships
      description: |
        Gets a list of site membership information for person **personId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.

        Example to filter by **visibility**, use any one of:

        ```
        (visibility='PRIVATE')
        (visibility='PUBLIC')
        (visibility='MODERATED')
        ```

        Example to filter by site **preset**:

        ```
        (preset='site-dashboard')
        ```

        The default sort order for the returned list is for sites to be sorted by ascending title.
        You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
        * id
        * title
        * role
      operationId: listSiteMembershipsForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/relationsParam'
      - $ref: '#/components/parameters/fieldsParam'
      - $ref: '#/components/parameters/whereParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteRolePaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{personId}/sites/{siteId}:
    get:
      tags:
      - sites
      summary: Get a site membership
      description: |
        Gets site membership information for person **personId** on site **siteId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getSiteMembershipForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/siteIdParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteRoleEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** or **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - sites
      summary: Delete a site membership
      description: |
        Deletes person **personId** as a member of site **siteId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteMembershipForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/siteIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** or **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /people/{personId}/groups:
    get:
      tags:
      - groups
      summary: List group memberships
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

         Gets a list of group membership information for person **personId**.

         You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

         You can use the **include** parameter to return additional information.

         You can use the **where** parameter to filter the returned groups by **isRoot**. For example, the following **where**
         clause will return just the root groups:

         ```
         (isRoot=true)
         ```

         The **where** parameter can also be used to filter by ***zone***. This may be combined with isRoot to narrow
         a result set even further. For example, the following where clause will only return groups belonging to the
         `MY.ZONE` zone.

         ```
         where=(zones in ('MY.ZONE'))
         ```

         This may be combined with the isRoot filter, as shown below:

         ```
         where=(isRoot=false AND zones in ('MY.ZONE'))
         ```

         ***Note:*** restrictions include
         * `AND` is the only supported operator when combining `isRoot` and `zones` filters
         * Only one zone is supported by the filter
         * The quoted zone name must be placed in parenthesis — a 400 error will result if these are omitted.


         The default sort order for the returned list is for groups to be sorted by ascending displayName.
         You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
         * id
         * displayName
      operationId: listGroupMembershipsForPerson
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/groupEntryIncludeParam'
      - $ref: '#/components/parameters/whereParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy** or **personId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
  /people/{personId}/request-password-reset:
    post:
      tags:
      - people
      summary: Request password reset
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Initiates the reset password workflow to send an email with reset password instruction to the user's registered email.

        The client is mandatory in the request body. For example:
        ```JSON
        {
          "client": "myClient"
        }
        ```
        **Note:** The client must be registered before this API can send an email. See [server documentation]. However, out-of-the-box
        share is registered as a default client, so you could pass **share** as the client name:
        ```JSON
        {
          "client": "share"
        }
        ```
        **Note:** No authentication is required to call this endpoint.
      operationId: requestPasswordReset
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      requestBody:
        description: The client name to send email with app-specific url
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientBody'
        required: true
      responses:
        "202":
          description: |
            Successful response or even when the **personId** does not exist or the user is disabled by an Administrator
          content: {}
        "404":
          description: |
            **client** is not registered
          content: {}
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: clientBody
  /people/{personId}/reset-password:
    post:
      tags:
      - people
      summary: Reset password
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Resets user's password

        The password, id and key properties are mandatory in the request body. For example:
        ```JSON
        {
          "password":"newPassword",
          "id":"activiti$10",
          "key":"4dad6d00-0daf-413a-b200-f64af4e12345"
        }
        ```
        **Note:** No authentication is required to call this endpoint.
      operationId: resetPassword
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      requestBody:
        description: The reset password details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetBody'
        required: true
      responses:
        "202":
          description: |
            Successful response or even when no workflow instance is found with the given **id** or the workflow instance is
            invalid (already been used or expired) or the given **personId** does not match the person's id requesting
            the password reset or the given workflow **key** does not match the recovered key
          content: {}
        "400":
          description: |
            Invalid parameter: Value of **password**, **id** or **key** is invalid
          content: {}
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: passwordResetBody
  /people/{personId}/avatar:
    get:
      tags:
      - people
      summary: Get avatar image
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets the avatar image related to the person **personId**. If the person has no related avatar then
        the **placeholder** query parameter can be optionally used to request a placeholder image to be returned.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getAvatarImage
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/attachmentParam'
      - $ref: '#/components/parameters/ifModifiedSinceHeader'
      - name: placeholder
        in: query
        description: |
          If **true** and there is no avatar for this **personId**
          then the placeholder image is returned, rather than a 404 response
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
          content: {}
        "400":
          description: |
            Invalid parameter: **personId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **personId** does not exist or avatar does not exist (and no placeholder requested)
          content: {}
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
    put:
      tags:
      - people
      summary: Update avatar image
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Updates the avatar image related to the person **personId**.

        The request body should be the binary stream for the avatar image. The content type of the file
        should be an image file. This will be used to generate an "avatar" thumbnail rendition.

        You must be the person or have admin rights to update a person's avatar.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: updateAvatarImage
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      requestBody:
        description: The binary content
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "200":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **personId** is not a valid format or the avatar cannot be uploaded
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to update the avatar
            image for **personId**
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        "413":
          description: Content exceeds individual file size limit (configured for
            network/system)
          content: {}
        "501":
          description: Renditions/thumbnails are disabled for the system
          content: {}
        "507":
          description: Content exceeds overall storage quota limit configured for
            the network/system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
      x-codegen-request-body-name: contentBodyUpdate
    delete:
      tags:
      - people
      summary: Delete avatar image
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Deletes the avatar image related to person **personId**.

        You must be the person or have admin rights to update a person's avatar.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteAvatarImage
      parameters:
      - $ref: '#/components/parameters/personIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to delete the avatar
            image for **personId**
          content: {}
        "404":
          description: |
            **personId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
  /sites:
    get:
      tags:
      - sites
      summary: List sites
      description: |
        Gets a list of sites in this repository.

        You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.

        Example to filter by **visibility**, use any one of:

        ```
        (visibility='PRIVATE')
        (visibility='PUBLIC')
        (visibility='MODERATED')
        ```

        Example to filter by site **preset**:

        ```
        (preset='site-dashboard')
        ```

        The default sort order for the returned list is for sites to be sorted by ascending title.
        You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
        * id
        * title
        * description

        You can use the **relations** parameter to include one or more related
        entities in a single response and so reduce network traffic.

        The entity types in Alfresco are organized in a tree structure.
        The **sites** entity has two children, **containers** and **members**.
        The following relations parameter returns all the container and member
        objects related to each site:

        ```
        containers,members
        ```
      operationId: listSites
      parameters:
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/relationsParam'
      - $ref: '#/components/parameters/fieldsParam'
      - $ref: '#/components/parameters/whereParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitePaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - sites
      summary: Create a site
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Creates a default site with the given details.  Unless explicitly specified, the site id will be generated
        from the site title. The site id must be unique and only contain alphanumeric and/or dash characters.

        Note: the id of a site cannot be updated once the site has been created.

        For example, to create a public site called "Marketing" the following body could be used:
        ```JSON
        {
          "title": "Marketing",
          "visibility": "PUBLIC"
        }
        ```

        The creation of the (surf) configuration files required by Share can be skipped via the **skipConfiguration** query parameter.

        **Note:** if skipped then such a site will **not** work within Share.

        The addition of the site to the user's site favorites can be skipped via the **skipAddToFavorites** query parameter.

        The creator will be added as a member with Site Manager role.

        When you create a site, a container called **documentLibrary** is created for you in the new site.
        This container is the root folder for content stored in the site.
      operationId: createSite
      parameters:
      - name: skipConfiguration
        in: query
        description: Flag to indicate whether the Share-specific (surf) configuration
          files for the site should not be created
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: skipAddToFavorites
        in: query
        description: Flag to indicate whether the site should not be added to the
          user's site favorites
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The site details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteBodyCreate'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
        "400":
          description: |
            Invalid parameter: **id**, **title**, or **description** exceed the maximum length;
            or **id** contains invalid characters; or **siteBodyCreate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "409":
          description: Site with the given identifier already exists
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: siteBodyCreate
  /sites/{siteId}:
    get:
      tags:
      - sites
      summary: Get a site
      description: |
        Gets information for site **siteId**.

        You can use the **relations** parameter to include one or more related
        entities in a single response and so reduce network traffic.

        The entity types in Alfresco are organized in a tree structure.
        The **sites** entity has two children, **containers** and **members**.
        The following relations parameter returns all the container and member
        objects related to the site **siteId**:

        ```
        containers,members
        ```
      operationId: getSite
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/relationsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - sites
      summary: Update a site
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Update the details for the given site **siteId**. Site Manager or otherwise a
        (site) admin can update title, description or visibility.

        Note: the id of a site cannot be updated once the site has been created.
      operationId: updateSite
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The site information to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteBodyUpdate'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteEntry'
        "400":
          description: |
            Invalid parameter: **siteBodyUpdate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to update the site that
            is visible to them.
          content: {}
        "404":
          description: |
            **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: siteBodyUpdate
    delete:
      tags:
      - sites
      summary: Delete a site
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Deletes the site with **siteId**.
      operationId: deleteSite
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - name: permanent
        in: query
        description: Flag to indicate whether the site should be permanently deleted
          i.e. bypass the trashcan
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "204":
          description: Successful response
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to delete the site that
            is visible to them.
          content: {}
        "404":
          description: |
            **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /sites/{siteId}/containers:
    get:
      tags:
      - sites
      summary: List site containers
      description: Gets a list of containers for the site **siteId**.
      operationId: listSiteContainers
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteContainerPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sites/{siteId}/containers/{containerId}:
    get:
      tags:
      - sites
      summary: Get a site container
      description: Gets information on the container **containerId** in site **siteId**.
      operationId: getSiteContainer
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - name: containerId
        in: path
        description: The unique identifier of a site container
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteContainerEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** or **containerId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /site-membership-requests:
    get:
      tags:
      - sites
      summary: Get site membership requests
      description: |
        Get the list of site membership requests the user can action.

        You can use the **where** parameter to filter the returned site membership requests by **siteId**. For example:

        ```
        (siteId=mySite)
        ```

        The **where** parameter can also be used to filter by ***personId***. For example:

        ```
        where=(personId=person)
        ```

        This may be combined with the siteId filter, as shown below:

        ```
        where=(siteId=mySite AND personId=person))
        ```
      operationId: getSiteMembershipRequests
      parameters:
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/whereParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMembershipRequestWithPersonPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sites/{siteId}/site-membership-requests/{inviteeId}/approve:
    post:
      tags:
      - sites
      summary: Approve a site membership request
      description: |
        Approve a site membership request.
      operationId: approveSiteMembershipRequest
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/inviteeIdParam'
      requestBody:
        description: "Accepting a request to join, optionally, allows assignment of\
          \ a role to the user"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipApprovalBody'
        required: false
      responses:
        "200":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: value of **siteId** or **inviteeId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to approve membership
            request
          content: {}
        "404":
          description: |
            **siteId** or **inviteeId** does not exist
          content: {}
        "422":
          description: |
            Integrity exception or not allowed to approve membership request.
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: siteMembershipApprovalBody
  /sites/{siteId}/site-membership-requests/{inviteeId}/reject:
    post:
      tags:
      - sites
      summary: Reject a site membership request
      description: |
        Reject a site membership request.
      operationId: rejectSiteMembershipRequest
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/inviteeIdParam'
      requestBody:
        description: "Rejecting a request to join, optionally, allows the inclusion\
          \ of comment"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipRejectionBody'
        required: false
      responses:
        "200":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: value of **siteId** or **inviteeId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to reject membership
            request
          content: {}
        "422":
          description: |
            Integrity exception or not allowed to reject membership request.
          content: {}
        "404":
          description: |
            **siteId** or **inviteeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: siteMembershipRejectionBody
  /sites/{siteId}/members:
    get:
      tags:
      - sites
      summary: List site memberships
      description: Gets a list of site memberships for site **siteId**.
      operationId: listSiteMemberships
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      - name: where
        in: query
        description: |
          Optionally filter the list.
          *   ```where=(isMemberOfGroup=false|true)```
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - sites
      summary: Create a site membership
      description: |
        Creates a site membership for person **personId** on site **siteId**.

        You can set the **role** to one of four types:

        * SiteConsumer
        * SiteCollaborator
        * SiteContributor
        * SiteManager

        **Note:** You can create more than one site membership by
        specifying a list of people in the JSON body like this:

        ```JSON
        [
          {
            "role": "SiteConsumer",
            "id": "joe"
          },
          {
            "role": "SiteConsumer",
            "id": "fred"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createSiteMembership
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The person to add and their role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipBodyCreate'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberEntry'
        "400":
          description: |
            Invalid parameter: value of **role** or **id** is invalid
            or **siteMembershipBodyCreate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to invite a person
          content: {}
        "404":
          description: |
            **siteId** or **personId** does not exist
          content: {}
        "409":
          description: Person with this **id** is already a member
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: siteMembershipBodyCreate
  /sites/{siteId}/members/{personId}:
    get:
      tags:
      - sites
      summary: Get a site membership
      description: |
        Gets site membership information for person **personId** on site **siteId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: getSiteMembership
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** or **personId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - sites
      summary: Update a site membership
      description: |
        Update the membership of person **personId** in site **siteId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.

        You can set the **role** to one of four types:

        * SiteConsumer
        * SiteCollaborator
        * SiteContributor
        * SiteManager
      operationId: updateSiteMembership
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/personIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The persons new role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipBodyUpdate'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMemberEntry'
        "400":
          description: |
            Invalid parameter: **role** does not exist
            or **siteMembershipBodyUpdate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** or **personId** does not exist
          content: {}
        "422":
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to update member
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: siteMembershipBodyUpdate
    delete:
      tags:
      - sites
      summary: Delete a site membership
      description: |
        Deletes person **personId** as a member of site **siteId**.

        You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.
      operationId: deleteSiteMembership
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/personIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** or **personId** does not exist
          content: {}
        "422":
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to delete member
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sites/{siteId}/group-members:
    get:
      tags:
      - sites
      summary: List group membership for site
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Gets a list of group membership for site **siteId**.
      operationId: listSiteGroups
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - sites
      summary: Create a site membership for group
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Creates a site membership for group **groupId** on site **siteId**.
        You can set the **role** to one of four types:
        * SiteConsumer
        * SiteCollaborator
        * SiteContributor
        * SiteManager
        **Note:** You can create more than one site membership by
        specifying a list of group in the JSON body like this:

        ```JSON
          [
           {
             "role": "SiteConsumer",
             "id": "authorityId"
           },
           {
             "role": "SiteConsumer",
             "id": "authorityId"
           }
          ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:
        ```JSON
          {
            "list": {
              "pagination": {
                "count": 2,
                "hasMoreItems": false,
                "totalItems": 2,
                "skipCount": 0,
                "maxItems": 100
              },
              "entries": [
                {
                  "entry": {
                    ...
                  }
                },
                {
                  "entry": {
                    ...
                  }
                }
              ]
            }
          }
        ```
      operationId: createSiteGroupMembership
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The group to add and their role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipBodyCreate'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupEntry'
        "400":
          description: |
            Invalid parameter: value of **role** or **id** is invalid
            or **siteMembershipBodyCreate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to invite a Group
          content: {}
        "404":
          description: |
            **siteId** or **groupId** does not exist
          content: {}
        "409":
          description: Group with this **id** is already a member
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: siteMembershipBodyCreate
  /sites/{siteId}/group-members/{groupId}:
    get:
      tags:
      - sites
      summary: Get information about site membership of group
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Gets site membership information for group **groupId** on site **siteId**.
      operationId: getSiteGroupMembership
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/groupIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** or **groupId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - sites
      summary: Update site membership of group
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Update the membership of person **groupId** in site **siteId**.
        You can set the **role** to one of four types:
        * SiteConsumer
        * SiteCollaborator
        * SiteContributor
        * SiteManager
      operationId: updateSiteGroupMembership
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/groupIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The groupId new role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteMembershipBodyUpdate'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteGroupEntry'
        "400":
          description: |
            Invalid parameter: **role** does not exist
            or **siteMembershipBodyUpdate** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** or **groupId** does not exist
          content: {}
        "422":
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to update group
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: siteMembershipBodyUpdate
    delete:
      tags:
      - sites
      summary: Delete a group membership for site
      description: |
        **Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.

        Deletes group **groupId** as a member of site **siteId**.
      operationId: deleteSiteGroupMembership
      parameters:
      - $ref: '#/components/parameters/siteIdParam'
      - $ref: '#/components/parameters/groupIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **siteId** or **groupId** does not exist
          content: {}
        "422":
          description: Integrity exception (eg. last site member must be a site manager)
            or not allowed to delete groupId
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags:
    get:
      tags:
      - tags
      summary: List tags
      description: |
        Gets a list of tags in this repository.

        You can use the **include** parameter to return additional **values** information.
      operationId: listTags
      parameters:
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      - $ref: '#/components/parameters/tagEntryIncludeParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tags/{tagId}:
    get:
      tags:
      - tags
      summary: Get a tag
      description: Get a specific tag with **tagId**.
      operationId: getTag
      parameters:
      - $ref: '#/components/parameters/tagIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagEntry'
              example:
                id: ed2444b5-d0c1-440b-b5b8-34a53e578091
                tag: test tag 1
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **tagId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - tags
      summary: Update a tag
      description: Updates the tag **tagId**.
      operationId: updateTag
      parameters:
      - $ref: '#/components/parameters/tagIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The updated tag
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagBody'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagEntry'
        "400":
          description: |
            Invalid parameter: **tagBodyUpdate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **tagId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: tagBodyUpdate
  /networks/{networkId}:
    get:
      tags:
      - networks
      summary: Get a network
      description: Gets information for a network **networkId**.
      operationId: getNetwork
      parameters:
      - $ref: '#/components/parameters/networkIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonNetworkEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **networkId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /shared-links:
    get:
      tags:
      - shared-links
      summary: List shared links
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Get a list of links that the current user has read permission on source node.

        The list is ordered in descending modified order.

        **Note:** The list of links is eventually consistent so newly created shared links may not appear immediately.
      operationId: listSharedLinks
      parameters:
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - name: where
        in: query
        description: |
          Optionally filter the list by "sharedByUser" userid of person who shared the link (can also use -me-)

          *   ```where=(sharedByUser='jbloggs')```

          *   ```where=(sharedByUser='-me-')```
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/sharedLinkEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "501":
          description: Shared links are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    post:
      tags:
      - shared-links
      summary: Create a shared link to a file
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Create a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set,
        so the shared link would become invalid when the expiry date is reached. For example:

        ```JSON
          {
            "nodeId": "1ff9da1a-ee2f-4b9c-8c34-3333333333",
            "expiresAt": "2017-03-23T23:00:00.000+0000"
          }
        ```

        **Note:** You can create shared links to more than one file
        specifying a list of **nodeId**s in the JSON body like this:

        ```JSON
        [
          {
            "nodeId": "1ff9da1a-ee2f-4b9c-8c34-4444444444"
          },
          {
            "nodeId": "1ff9da1a-ee2f-4b9c-8c34-5555555555"
          }
        ]
        ```
        If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

        ```JSON
        {
          "list": {
            "pagination": {
              "count": 2,
              "hasMoreItems": false,
              "totalItems": 2,
              "skipCount": 0,
              "maxItems": 100
            },
            "entries": [
              {
                "entry": {
                  ...
                }
              },
              {
                "entry": {
                  ...
                }
              }
            ]
          }
        }
        ```
      operationId: createSharedLink
      parameters:
      - $ref: '#/components/parameters/sharedLinkEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The nodeId to create a shared link for
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedLinkBodyCreate'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkEntry'
        "400":
          description: |
            Invalid parameter: **nodeId** is not a valid format, or does not identify a file,
            or **sharedLinkBodyCreate** invalid, or the specified expiry date is invalid. E.g. the expiry date
            has already passed
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: "Current user does not have permission to create **sharedId**\
            \ (for example, no read permission)"
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "409":
          description: Shared link already exists for **nodeId**
          content: {}
        "501":
          description: Shared links are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: sharedLinkBodyCreate
  /shared-links/{sharedId}:
    get:
      tags:
      - shared-links
      summary: Get a shared link
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets minimal information for the file with shared link identifier **sharedId**.

        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLink
      parameters:
      - $ref: '#/components/parameters/sharedIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedLinkEntry'
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format
          content: {}
        "404":
          description: |
            **sharedId** does not exist
          content: {}
        "501":
          description: Shared links are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
    delete:
      tags:
      - shared-links
      summary: Deletes a shared link
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Deletes the shared link with identifier **sharedId**.
      operationId: deleteSharedLink
      parameters:
      - $ref: '#/components/parameters/sharedIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to delete **sharedId**
          content: {}
        "404":
          description: |
            **sharedId** does not exist
          content: {}
        "501":
          description: Shared links are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /shared-links/{sharedId}/content:
    get:
      tags:
      - shared-links
      summary: Get shared link content
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the content of the file with shared link identifier **sharedId**.

        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLinkContent
      parameters:
      - $ref: '#/components/parameters/sharedIdParam'
      - $ref: '#/components/parameters/attachmentParam'
      - $ref: '#/components/parameters/ifModifiedSinceHeader'
      - $ref: '#/components/parameters/RangeHeader'
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
          content: {}
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
          content: {}
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format
          content: {}
        "404":
          description: |
            **sharedId** does not exist
          content: {}
        "416":
          description: Range Not Satisfiable
          content: {}
        "501":
          description: Shared links are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /shared-links/{sharedId}/renditions:
    get:
      tags:
      - shared-links
      summary: List renditions for a shared link
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of the rendition information for the file with shared link identifier **sharedId**.

        This API method returns rendition information, including the rendition id, for each rendition
        where the rendition status is CREATED, which means the rendition is available to view/download.

        **Note:** No authentication is required to call this endpoint.
      operationId: listSharedLinkRenditions
      parameters:
      - $ref: '#/components/parameters/sharedIdParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionPaging'
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format
          content: {}
        "404":
          description: |
            **sharedId** does not exist
          content: {}
        "501":
          description: Shared links are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /shared-links/{sharedId}/renditions/{renditionId}:
    get:
      tags:
      - shared-links
      summary: Get shared link rendition information
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets rendition information for the file with shared link identifier **sharedId**.

        This API method returns rendition information where the rendition status is CREATED,
        which means the rendition is available to view/download.

        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLinkRendition
      parameters:
      - $ref: '#/components/parameters/sharedIdParam'
      - $ref: '#/components/parameters/renditionIdParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenditionEntry'
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid
          content: {}
        "404":
          description: |
            **sharedId**  or **renditionId** does not exist (ie. not CREATED)
          content: {}
        "501":
          description: Shared links are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /shared-links/{sharedId}/renditions/{renditionId}/content:
    get:
      tags:
      - shared-links
      summary: Get shared link rendition content
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets the rendition content for file with shared link identifier **sharedId**.

        **Note:** No authentication is required to call this endpoint.
      operationId: getSharedLinkRenditionContent
      parameters:
      - $ref: '#/components/parameters/sharedIdParam'
      - $ref: '#/components/parameters/renditionIdParam'
      - $ref: '#/components/parameters/attachmentParam'
      - $ref: '#/components/parameters/ifModifiedSinceHeader'
      - $ref: '#/components/parameters/RangeHeader'
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "206":
          description: Partial Content
          content: {}
        "304":
          description: Content has not been modified since the date provided in the
            If-Modified-Since header
          content: {}
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid
          content: {}
        "404":
          description: |
            **sharedId** does not exist
          content: {}
        "416":
          description: Range Not Satisfiable
          content: {}
        "501":
          description: Shared links are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /shared-links/{sharedId}/email:
    post:
      tags:
      - shared-links
      summary: Email shared link
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Sends email with app-specific url including identifier **sharedId**.

        The client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info:
        ```JSON
        {
            "client": "myClient",
            "recipientEmails": ["john.doe@acme.com", "joe.bloggs@acme.com"]
        }
        ```
        A plain text message property can be optionally provided in the request body to customise the sent email.
        Also, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco).
        For example, to email a shared link with a messages and a locale:
        ```JSON
        {
            "client": "myClient",
            "recipientEmails": ["john.doe@acme.com", "joe.bloggs@acme.com"],
            "message": "myMessage",
            "locale":"en-GB"
        }
        ```
        **Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box
         share is registered as a default client, so you could pass **share** as the client name:
        ```JSON
        {
            "client": "share",
            "recipientEmails": ["john.doe@acme.com"]
        }
        ```
      operationId: emailSharedLink
      parameters:
      - $ref: '#/components/parameters/sharedIdParam'
      requestBody:
        description: The shared link email to send
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedLinkBodyEmail'
        required: true
      responses:
        "202":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **sharedId** is not a valid format
            or **sharedLinkBodyEmail** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **sharedId** does not exist or **client** is not registered
          content: {}
        "501":
          description: Shared links are disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
      x-codegen-request-body-name: sharedLinkBodyEmail
  /probes/{probeId}:
    get:
      tags:
      - probes
      summary: Check readiness and liveness of the repository
      description: |
        **Note:** this endpoint is available in Alfresco 6.0 and newer versions.

        Returns a status of 200 to indicate success and 503 for failure.

        The readiness probe is normally only used to check repository startup.

        The liveness probe should then be used to check the repository is still responding to requests.

        **Note:** No authentication is required to call this endpoint.
      operationId: getProbe
      parameters:
      - name: probeId
        in: path
        description: |
          The name of the probe:
          * -ready-
          * -live-
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProbeEntry'
        "404":
          description: |
            **probeId** does not exist
          content: {}
        "503":
          description: Service Unavailable - Probe failure status.
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "6.0"
  /queries/nodes:
    get:
      tags:
      - queries
      summary: Find nodes
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of nodes that match the given search criteria.

        The search term is used to look for nodes that match against name, title, description, full text content or tags.

        The search term:
        - must contain a minimum of 3 alphanumeric characters
        - allows "quoted term"
        - can optionally use '*' for wildcard matching

        By default, file and folder types will be searched unless a specific type is provided as a query parameter.

        By default, the search will be across the repository unless a specific root node id is provided to start the search from.

        You can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
        * name
        * modifiedAt
        * createdAt
      operationId: findNodes
      parameters:
      - name: term
        in: query
        description: The term to search for
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: rootNodeId
        in: query
        description: |
          The id of the node to start the search from.

          Supports the aliases -my-, -root- and -shared-
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - name: nodeType
        in: query
        description: |
          Restrict the returned results to only those of the given node type and its sub-types
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/nodeAssocMinimalEntryIncludeParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid, or search **term** too short, or **nodeType** unknown, or **orderBy** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **rootNodeId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /queries/sites:
    get:
      tags:
      - queries
      summary: Find sites
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of sites that match the given search criteria.

        The search term is used to look for sites that match against site id, title or description.

        The search term:
        - must contain a minimum of 2 alphanumeric characters
        - can optionally use '*' for wildcard matching within the term

        The default sort order for the returned list is for sites to be sorted by ascending id.
        You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
        * id
        * title
        * description
      operationId: findSites
      parameters:
      - name: term
        in: query
        description: The term to search for
        required: true
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitePaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid, or search **term** too short, or **orderBy** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /queries/people:
    get:
      tags:
      - queries
      summary: Find people
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Gets a list of people that match the given search criteria.

        The search term is used to look for matches against person id, firstname and lastname.

        The search term:
        - must contain a minimum of 2 alphanumeric characters
        - can optionally use '*' for wildcard matching within the term

        You can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:
        * id
        * firstName
        * lastName
      operationId: findPeople
      parameters:
      - name: term
        in: query
        description: |
          The term to search for
        required: true
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      - $ref: '#/components/parameters/orderByParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid, or search **term** too short, or **orderBy** invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: "5.2"
  /groups:
    get:
      tags:
      - groups
      summary: List groups
      description: "**Note:** this endpoint is available in Alfresco 5.2.1 and newer\
        \ versions.\n\nGets a list of groups.\n\nYou can use the **include** parameter\
        \ to return additional information.\n\nYou can use the **where** parameter\
        \ to filter the returned groups by **isRoot**. For example, the following\
        \ **where**\nclause will return just the root groups:\n\n```\n(isRoot=true)\n\
        ```\n\nThe **where** parameter can also be used to filter by ***zone*** and\
        \ ***displayName***.\nThey may be combined with isRoot to narrow a result\
        \ set even further. \nFor example, the following where clause will only return\
        \ groups belonging to the `MY.ZONE` zone.\n\n```\nwhere=(zones in ('MY.ZONE'))\n\
        ```\n\nThis may be combined with the isRoot filter, as shown below:\n\n```\n\
        where=(isRoot=false AND zones in ('MY.ZONE'))\n```\nThe following where clause\
        \ will only return groups with displayName `MY.GROUP.NAME`. \n\n```\nwhere=(displayName\
        \ in ('MY.GROUP.NAME'))\n```\nThis may be combined with the isRoot and zones\
        \ filter, as shown below:\n\n```\nwhere=(isRoot=false AND displayName in ('MY.GROUP.NAME'))\n\
        ```\n\n```\nwhere=(zones in ('MY.ZONE') AND displayName in ('MY.GROUP.NAME'))\n\
        ```\n\n```\nwhere=(isRoot=false AND zones in ('MY.ZONE') AND displayName in\
        \ ('MY.GROUP.NAME'))\n```\n\n***Note:*** restrictions include\n* `AND` is\
        \ the only supported operator when combining `isRoot`, `zones` and `displayName`\
        \ filters\n* Only one zone is supported by the filter\n* Only one displayName\
        \ is supported by the filter\n* The quoted zone name and displayName must\
        \ be placed in parenthesis — a 400 error will result if these are omitted.\n\
        \nThe default sort order for the returned list is for groups to be sorted\
        \ by ascending displayName.\nYou can override the default by using the **orderBy**\
        \ parameter. You can specify one of the following fields in the **orderBy**\
        \ parameter:\n* id\n* displayName\n"
      operationId: listGroups
      parameters:
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/groupEntryIncludeParam'
      - $ref: '#/components/parameters/whereParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount**, or **orderBy**, or **where** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
    post:
      tags:
      - groups
      summary: Create a group
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Create a group.

        The group id must start with "GROUP\_". If this is omitted it will be added automatically.
        This format is also returned when listing groups or group memberships. It should be noted
        that the other group-related operations also expect the id to start with "GROUP\_".

        If one or more parentIds are specified then the group will be created and become a member
        of each of the specified parent groups.

        If no parentIds are specified then the group will be created as a root group.

        The group will be created in the **APP.DEFAULT** and **AUTH.ALF** zones.

        You must have admin rights to create a group.
      operationId: createGroup
      parameters:
      - $ref: '#/components/parameters/groupEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The group to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupBodyCreate'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntry'
        "400":
          description: |
            Invalid parameter: invalid **groupBodyCreate**
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to create a group
          content: {}
        "404":
          description: |
            **parentIds** does not exist
          content: {}
        "409":
          description: |
            **id** clashes with an existing group
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: groupBodyCreate
  /groups/{groupId}:
    get:
      tags:
      - groups
      summary: Get group details
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Get details for group **groupId**.

        You can use the **include** parameter to return additional information.
      operationId: getGroup
      parameters:
      - $ref: '#/components/parameters/groupIdParam'
      - $ref: '#/components/parameters/groupEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntry'
        "400":
          description: |
            Invalid parameter: invalid **groupId**
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **groupId** does not exist
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
    put:
      tags:
      - groups
      summary: Update group details
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Update details (displayName) for group **groupId**.

        You must have admin rights to update a group.
      operationId: updateGroup
      parameters:
      - $ref: '#/components/parameters/groupIdParam'
      - $ref: '#/components/parameters/groupEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The group information to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupBodyUpdate'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntry'
        "400":
          description: |
            Invalid parameter: **groupId** or **groupBodyCreate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to update a group
          content: {}
        "404":
          description: |
            **groupId** does not exist
          content: {}
        "409":
          description: |
            Trying to modify a pre-defined system group, such as GROUP_EVERYONE
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: groupBodyUpdate
    delete:
      tags:
      - groups
      summary: Delete a group
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Delete group **groupId**.

        The option to cascade delete applies this recursively to any hierarchy of group members.
        In this case, removing a group member does not delete the person or sub-group itself.
        If a removed sub-group no longer has any parent groups then it becomes a root group.

        You must have admin rights to delete a group.
      operationId: deleteGroup
      parameters:
      - $ref: '#/components/parameters/groupIdParam'
      - name: cascade
        in: query
        description: |
          If **true** then the delete will be applied in cascade to sub-groups
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **groupId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to delete a group member
          content: {}
        "404":
          description: |
            **groupId** does not exist
          content: {}
        "409":
          description: |
            Trying to delete a pre-defined system group, such as GROUP_EVERYONE.
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
  /groups/{groupId}/members:
    get:
      tags:
      - groups
      summary: List memberships of a group
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Gets a list of the group memberships for the group **groupId**.

        You can use the **where** parameter to filter the returned groups by **memberType**.

        Example to filter by **memberType**, use any one of:

        ```
        (memberType='GROUP')
        (memberType='PERSON')
        ```

        The default sort order for the returned list is for group members to be sorted by ascending displayName.
        You can override the default by using the **orderBy** parameter. You can specify one of the following fields in the **orderBy** parameter:
        * id
        * displayName
      operationId: listGroupMemberships
      parameters:
      - $ref: '#/components/parameters/groupIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/whereParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **groupId** does not exist
          content: {}
        "405":
          description: |
            Trying to list all members of a pre-defined system group, such as GROUP_EVERYONE
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
    post:
      tags:
      - groups
      summary: Create a group membership
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Create a group membership (for an existing person or group) within a group **groupId**.

        If the added group was previously a root group then it becomes a non-root group since it now has a parent.

        It is an error to specify an **id** that does not exist.

        You must have admin rights to create a group membership.
      operationId: createGroupMembership
      parameters:
      - $ref: '#/components/parameters/groupIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The group membership to add (person or sub-group)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMembershipBodyCreate'
        required: true
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberEntry'
        "400":
          description: |
            Invalid parameter: **groupId** or **groupMembershipBodyCreate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to create a group membership
          content: {}
        "404":
          description: |
            **groupId** or *id* (of group or person) does not exist
          content: {}
        "409":
          description: |
            Trying to modify a pre-defined system group, such as GROUP_EVERYONE.
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
      x-codegen-request-body-name: groupMembershipBodyCreate
  /groups/{groupId}/members/{groupMemberId}:
    delete:
      tags:
      - groups
      summary: Delete a group membership
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.

        Delete group member **groupMemberId** (person or sub-group) from group **groupId**.

        Removing a group member does not delete the person or sub-group itself.

        If a removed sub-group no longer has any parent groups then it becomes a root group.

        You must have admin rights to delete a group membership.
      operationId: deleteGroupMembership
      parameters:
      - $ref: '#/components/parameters/groupIdParam'
      - $ref: '#/components/parameters/groupMemberIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: value of **groupId**, or **groupMemberId** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to delete a group membership
          content: {}
        "404":
          description: |
            **groupId** or **groupMemberId** does not exist
          content: {}
        "409":
          description: |
            Trying to delete a member of a pre-defined system group, such as GROUP_EVERYONE
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.1
  /audit-applications:
    get:
      tags:
      - audit
      summary: List audit applications
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets a list of audit applications in this repository.

        This list may include pre-configured audit applications, if enabled, such as:

        * alfresco-access
        * CMISChangeLog
        * Alfresco Tagging Service
        * Alfresco Sync Service (used by Enterprise Cloud Sync)

        You must have admin rights to retrieve audit information.
      operationId: listAuditApps
      parameters:
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditAppPaging'
        "400":
          description: |
            Invalid parameter: value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to retrieve audit information
          content: {}
        "501":
          description: Audit is disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
  /audit-applications/{auditApplicationId}:
    get:
      tags:
      - audit
      summary: Get audit application info
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Get status of an audit application **auditApplicationId**.

        You must have admin rights to retrieve audit information.

        You can use the **include** parameter to return the minimum and/or maximum audit record id for the application.
      operationId: getAuditApp
      parameters:
      - $ref: '#/components/parameters/auditApplicationIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      - $ref: '#/components/parameters/auditApplicationIncludeParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditApp'
        "400":
          description: |
            Invalid parameter: invalid **auditApplicationId**
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to retrieve audit information
          content: {}
        "404":
          description: |
            **applicationId** does not exist
          content: {}
        "501":
          description: Audit is disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
    put:
      tags:
      - audit
      summary: Update audit application info
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Disable or re-enable the audit application **auditApplicationId**.

        New audit entries will not be created for a disabled audit application until
        it is re-enabled (and system-wide auditing is also enabled).

        Note, it is still possible to query &/or delete any existing audit entries even
        if auditing is disabled for the audit application.

        You must have admin rights to update audit application.
      operationId: updateAuditApp
      parameters:
      - $ref: '#/components/parameters/auditApplicationIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      requestBody:
        description: The audit application to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditBodyUpdate'
        required: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditApp'
        "400":
          description: |
            Invalid parameter: **auditApplicationId** is not a valid format or **auditAppBodyUpdate** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to update audit application
          content: {}
        "404":
          description: |
            **auditApplicationId** does not exist
          content: {}
        "501":
          description: Audit is disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
      x-codegen-request-body-name: auditAppBodyUpdate
  /audit-applications/{auditApplicationId}/audit-entries:
    get:
      tags:
      - audit
      summary: List audit entries for an audit application
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets a list of audit entries for audit application **auditApplicationId**.

        You can use the **include** parameter to return additional **values** information.

        The list can be filtered by one or more of:
        * **createdByUser** person id
        * **createdAt** inclusive time period
        * **id** inclusive range of ids
        * **valuesKey** audit entry values contains the exact matching key
        * **valuesValue** audit entry values contains the exact matching value

        The default sort order is **createdAt** ascending, but you can use an optional **ASC** or **DESC**
        modifier to specify an ascending or descending sort order.

        For example, specifying ```orderBy=createdAt DESC``` returns audit entries in descending **createdAt** order.

        You must have admin rights to retrieve audit information.
      operationId: listAuditEntriesForAuditApp
      parameters:
      - $ref: '#/components/parameters/auditApplicationIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/omitTotalItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - name: where
        in: query
        description: |
          Optionally filter the list. Here are some examples:

          *   ```where=(createdByUser='jbloggs')```

          *   ```where=(id BETWEEN ('1234', '4321')```

          *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```

          *   ```where=(createdByUser='jbloggs' and createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```

          *   ```where=(valuesKey='/alfresco-access/login/user')```

          *   ```where=(valuesKey='/alfresco-access/transaction/action' and valuesValue='DELETE')```
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/auditMinimalEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntryPaging'
        "400":
          description: |
            Invalid parameter: *auditApplicationId** is not a valid format, value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to retrieve audit information
          content: {}
        "404":
          description: |
            **applicationId** does not exist
          content: {}
        "501":
          description: Audit is disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
    delete:
      tags:
      - audit
      summary: Permanently delete audit entries for an audit application
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Permanently delete audit entries for an audit application **auditApplicationId**.

        The **where** clause must be specified, either with an inclusive time period or for
        an inclusive range of ids. The delete is within the context of the given audit application.

        For example:

        *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```
        *   ```where=(id BETWEEN ('1234', '4321')```

        You must have admin rights to delete audit information.
      operationId: deleteAuditEntriesForAuditApp
      parameters:
      - $ref: '#/components/parameters/auditApplicationIdParam'
      - name: where
        in: query
        description: |
          Audit entries to permanently delete for an audit application, given an inclusive time period or range of ids. For example:

          *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```
          *   ```where=(id BETWEEN ('1234', '4321')```
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **auditApplicationId** is not a valid format or invalid **where**
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to delete audit information
          content: {}
        "404":
          description: |
            **auditApplicationId** does not exist
          content: {}
        "501":
          description: Audit is disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
  /audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}:
    get:
      tags:
      - audit
      summary: Get audit entry
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets audit entry **auditEntryId**.

        You must have admin rights to access audit information.
      operationId: getAuditEntry
      parameters:
      - $ref: '#/components/parameters/auditApplicationIdParam'
      - $ref: '#/components/parameters/auditEntryIdParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntryEntry'
        "400":
          description: |
            Invalid parameter: **auditApplicationId** or **auditEntryId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to retrieve audit information
          content: {}
        "404":
          description: |
            **auditApplicationId** or **auditEntryId** does not exist
          content: {}
        "501":
          description: Audit is disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
    delete:
      tags:
      - audit
      summary: Permanently delete an audit entry
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Permanently delete a single audit entry **auditEntryId**.

        You must have admin rights to delete audit information.
      operationId: deleteAuditEntry
      parameters:
      - $ref: '#/components/parameters/auditApplicationIdParam'
      - $ref: '#/components/parameters/auditEntryIdParam'
      responses:
        "204":
          description: Successful response
          content: {}
        "400":
          description: |
            Invalid parameter: **auditApplicationId** or **auditEntryId** is not a valid format
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: Current user does not have permission to delete audit information
          content: {}
        "404":
          description: |
            **auditApplicationId** or **auditEntryId** does not exist
          content: {}
        "501":
          description: Audit is disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
  /nodes/{nodeId}/audit-entries:
    get:
      tags:
      - audit
      summary: List audit entries for a node
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets a list of audit entries for node **nodeId**.

        The list can be filtered by **createdByUser** and for a given inclusive time period.

        The default sort order is **createdAt** ascending, but you can use an optional **ASC** or **DESC**
        modifier to specify an ascending or descending sort order.

        For example, specifying ```orderBy=createdAt DESC``` returns audit entries in descending **createdAt** order.

        This relies on the pre-configured 'alfresco-access' audit application.
      operationId: listAuditEntriesForNode
      parameters:
      - $ref: '#/components/parameters/nodeIdParam'
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - name: where
        in: query
        description: |
          Optionally filter the list. Here are some examples:

          *   ```where=(createdByUser='-me-')```

          *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```

          *   ```where=(createdByUser='jbloggs' and createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```
        required: false
        style: form
        explode: true
        schema:
          type: string
      - $ref: '#/components/parameters/auditMinimalEntryIncludeParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEntryPaging'
        "400":
          description: |
            Invalid parameter: *nodeId** is not a valid format, value of **maxItems** or **skipCount** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "403":
          description: User does not have permission to retrieve audit information
          content: {}
        "404":
          description: |
            **nodeId** does not exist
          content: {}
        "501":
          description: Audit is disabled for the system
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
  /action-definitions:
    get:
      tags:
      - actions
      summary: Retrieve list of available actions
      description: |
        **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.

        Gets a list of all available actions

        The default sort order for the returned list is for actions to be sorted by ascending name.
        You can override the default by using the **orderBy** parameter.

        You can use any of the following fields to order the results:
        * name
        * title
      operationId: listActions
      parameters:
      - $ref: '#/components/parameters/skipCountParam'
      - $ref: '#/components/parameters/maxItemsParam'
      - $ref: '#/components/parameters/orderByParam'
      - $ref: '#/components/parameters/fieldsParam'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDefinitionList'
        "400":
          description: |
            Invalid parameter: value of **maxItems**, **skipCount** or **orderBy** is invalid
          content: {}
        "401":
          description: Authentication failed
          content: {}
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-alfresco-since: 5.2.2
  /action-definitions/{actionDefinitionId}:
    get:
      tags:
      - actions
      summary: Retrieve the details of an action definition
      description: |
        **Note:** this endpoint is available in Alfresco 5.2 and newer versions.

        Retrieve the details of the action denoted by **actionDefinitionId**.
      operationId: actionDetails
      parameters:
      - $ref: '#/components/parameters/actionDefinitionIdParam'
      responses:
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionDefinitionEntry'
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **actionDefinitionId** does not exist
          content: {}
      x-alfresco-since: 5.2.2
  /action-executions:
    post:
      tags:
      - actions
      summary: Execute an action
      description: "**Note:** this endpoint is available in Alfresco 5.2 and newer\
        \ versions.\n\nExecutes an action\n\nAn action may be executed against a node\
        \ specified by **targetId**. For example:\n\n```\n{\n  \"actionDefinitionId\"\
        : \"copy\",\n  \"targetId\": \"4c4b3c43-f18b-43ff-af84-751f16f1ddfd\",\n \
        \ \"params\": {\n  \t\"destination-folder\": \"34219f79-66fa-4ebf-b371-118598af898c\"\
        \n  }\n}\n```\n\nPerforming a POST with the request body shown above will\
        \ result in the node identified by ```targetId```\nbeing copied to the destination\
        \ folder specified in the ```params``` object by the key ```destination-folder```.\n\
        \n**targetId** is optional, however, currently **targetId** must be a valid\
        \ node ID.\nIn the future, actions may be executed against different entity\
        \ types or\nexecuted without the need for the context of an entity.\n\n\n\
        Parameters supplied to the action within the ```params``` object will be converted\
        \ to the expected type,\nwhere possible using the DefaultTypeConverter class.\
        \ In addition:\n\n* Node IDs may be supplied in their short form (implicit\
        \ workspace://SpacesStore prefix)\n* Aspect names may be supplied using their\
        \ short form, e.g. cm:versionable or cm:auditable\n\nIn this example, we add\
        \ the aspect ```cm:versionable``` to a node using the QName resolution mentioned\
        \ above:\n\n```\n{\n  \"actionDefinitionId\": \"add-features\",\n  \"targetId\"\
        : \"16349e3f-2977-44d1-93f2-73c12b8083b5\",\n  \"params\": {\n  \t\"aspect-name\"\
        : \"cm:versionable\"\n  }\n}\n```\n\nThe ```actionDefinitionId``` is the ```id```\
        \ of an action definition as returned by\nthe _list actions_ operations (e.g.\
        \ GET /action-definitions).\n\nThe action will be executed **asynchronously**\
        \ with a `202` HTTP response signifying that\nthe request has been accepted\
        \ successfully. The response body contains the unique ID of the action\npending\
        \ execution. The ID may be used, for example to correlate an execution with\
        \ output in the server logs.\n"
      operationId: actionExec
      requestBody:
        description: Action execution details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionBodyExec'
        required: true
      responses:
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "202":
          description: |
            Action execution request accepted and pending execution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionExecResultEntry'
        "400":
          description: |
            Invalid parameter: **actionDefinitionId** missing but required by the action
          content: {}
        "401":
          description: Authentication failed
          content: {}
        "404":
          description: |
            **actionDefinitionId** or **targetId** does not exist
          content: {}
      x-alfresco-since: 5.2.2
      x-codegen-request-body-name: actionBodyExec
components:
  schemas:
    NodeAssociationPaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/NodeAssociationPagingList'
    FavoriteSiteEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/FavoriteSite'
    SharedLinkPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SharedLinkEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Rendition:
      type: object
      properties:
        id:
          type: string
        content:
          $ref: '#/components/schemas/ContentInfo'
        status:
          type: string
          enum:
          - CREATED
          - NOT_CREATED
    AuditEntryPagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/AuditEntryEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    SiteMember:
      required:
      - id
      - person
      - role
      type: object
      properties:
        role:
          type: string
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
        person:
          $ref: '#/components/schemas/Person'
        id:
          type: string
        isMemberOfGroup:
          type: boolean
    NodeBodyUpdate:
      type: object
      properties:
        aspectNames:
          type: array
          items:
            type: string
        permissions:
          $ref: '#/components/schemas/PermissionsBody'
        name:
          pattern: "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[\
            \ ]+$))"
          type: string
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name
        nodeType:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
    Node:
      required:
      - createdAt
      - createdByUser
      - id
      - isFile
      - isFolder
      - modifiedAt
      - modifiedByUser
      - name
      - nodeType
      type: object
      properties:
        isLink:
          type: boolean
        isFile:
          type: boolean
        createdByUser:
          $ref: '#/components/schemas/UserInfo'
        modifiedAt:
          type: string
          format: date-time
        nodeType:
          type: string
        parentId:
          type: string
        content:
          $ref: '#/components/schemas/ContentInfo'
        aspectNames:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        path:
          $ref: '#/components/schemas/PathInfo'
        isFolder:
          type: boolean
        permissions:
          $ref: '#/components/schemas/PermissionsInfo'
        isLocked:
          type: boolean
          default: false
        modifiedByUser:
          $ref: '#/components/schemas/UserInfo'
        name:
          pattern: "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[\
            \ ]+$))"
          type: string
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name
        definition:
          $ref: '#/components/schemas/Definition'
        id:
          type: string
        properties:
          type: object
          properties: {}
        allowableOperations:
          type: array
          items:
            type: string
        isFavorite:
          type: boolean
    SiteGroupPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/SiteGroupPagingList'
    Activity:
      required:
      - activityType
      - feedPersonId
      - id
      - postPersonId
      type: object
      properties:
        postedAt:
          type: string
          description: The date time at which the activity was performed
          format: date-time
        feedPersonId:
          type: string
          description: The feed on which this activity was posted
        postPersonId:
          type: string
          description: The id of the person who performed the activity
        siteId:
          type: string
          description: The unique id of the site on which the activity was performed
        activitySummary:
          type: object
          additionalProperties:
            type: string
          description: An object summarizing the activity
        id:
          type: integer
          description: The unique id of the activity
          format: int64
        activityType:
          type: string
          description: The type of the activity posted
      description: |
        Activities describe any past activity in a site,
        for example creating an item of content, commenting on a node,
        liking an item of content
    ActionDefinitionListList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ActionDefinition'
        pagination:
          $ref: '#/components/schemas/Pagination'
    SiteContainerPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SiteContainerEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    SiteGroup:
      required:
      - group
      - id
      - role
      type: object
      properties:
        role:
          type: string
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
        id:
          type: string
        group:
          $ref: '#/components/schemas/GroupMember'
    SiteRoleEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/SiteRole'
    SiteMembershipRequestEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/SiteMembershipRequest'
    FavoriteBodyCreate:
      required:
      - target
      type: object
      properties:
        target:
          type: object
          properties: {}
    SiteMembershipRequestBodyCreate:
      required:
      - id
      type: object
      properties:
        client:
          type: string
          description: |
            Optional client name used when sending an email to the end user, defaults to "share" if not provided.
            **Note:** The client must be registered before this API can send an email.
            **Note:** This is available in Alfresco 7.0.0 and newer versions
        id:
          type: string
        message:
          type: string
        title:
          type: string
    RenditionEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Rendition'
    GroupPagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/GroupEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    PathElement:
      type: object
      properties:
        aspectNames:
          type: array
          items:
            type: string
        name:
          type: string
        id:
          type: string
        nodeType:
          type: string
    ActivityPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ActivityEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    SiteRolePaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/SiteRolePagingList'
    SiteMemberEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/SiteMember'
    FavoriteSiteBodyCreate:
      required:
      - id
      type: object
      properties:
        id:
          type: string
    SitePaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/SitePagingList'
    SiteMembershipRejectionBody:
      type: object
      properties:
        comment:
          type: string
    PasswordResetBody:
      required:
      - id
      - key
      - password
      type: object
      properties:
        password:
          type: string
          description: the new password
        id:
          type: string
          description: the workflow id provided in the reset password email
        key:
          type: string
          description: the workflow key provided in the reset password email
    SiteMembershipRequest:
      required:
      - createdAt
      - id
      - site
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        site:
          $ref: '#/components/schemas/Site'
        id:
          type: string
        message:
          type: string
    ActionBodyExec:
      required:
      - actionDefinitionId
      type: object
      properties:
        targetId:
          type: string
          description: "The entity upon which to execute the action, typically a node\
            \ ID or similar"
        actionDefinitionId:
          type: string
        params:
          type: object
          properties: {}
    PreferencePaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/PreferencePagingList'
    GroupBodyCreate:
      required:
      - displayName
      - id
      type: object
      properties:
        displayName:
          type: string
        parentIds:
          type: array
          items:
            type: string
        id:
          type: string
    Definition:
      type: object
      properties:
        properties:
          type: array
          description: List of property definitions effective for this node as the
            result of combining the type with all aspects
          items:
            $ref: '#/components/schemas/Property'
    SiteMembershipBodyUpdate:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
    NodeBodyCreate:
      required:
      - name
      - nodeType
      type: object
      properties:
        aspectNames:
          type: array
          items:
            type: string
        permissions:
          $ref: '#/components/schemas/PermissionsBody'
        relativePath:
          type: string
        name:
          pattern: "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[\
            \ ]+$))"
          type: string
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name
        association:
          $ref: '#/components/schemas/NodeBodyCreateAssociation'
        secondaryChildren:
          type: array
          items:
            $ref: '#/components/schemas/ChildAssociationBody'
        definition:
          $ref: '#/components/schemas/Definition'
        nodeType:
          type: string
        targets:
          type: array
          items:
            $ref: '#/components/schemas/AssociationBody'
        properties:
          type: object
          properties: {}
    PersonNetworkEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/PersonNetwork'
    NodeBodyCopy:
      required:
      - targetParentId
      type: object
      properties:
        targetParentId:
          type: string
        name:
          pattern: "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[\
            \ ]+$))"
          type: string
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name
    SharedLinkBodyCreate:
      required:
      - nodeId
      type: object
      properties:
        nodeId:
          type: string
        expiresAt:
          type: string
          format: date-time
    NodeBodyCreateAssociation:
      type: object
      properties:
        assocType:
          type: string
    Preference:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The unique id of the preference
        value:
          type: string
          description: The value of the preference. Note that this can be of any JSON
            type
      description: |
        A specific preference
    AuditEntry:
      required:
      - auditApplicationId
      - createdAt
      - createdByUser
      - id
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        createdByUser:
          $ref: '#/components/schemas/UserInfo'
        values:
          type: object
          properties: {}
        auditApplicationId:
          type: string
        id:
          type: string
    SiteMembershipRequestWithPerson:
      required:
      - createdAt
      - id
      - person
      - site
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        site:
          $ref: '#/components/schemas/Site'
        person:
          $ref: '#/components/schemas/Person'
        id:
          type: string
        message:
          type: string
    RatingPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/RatingEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    RenditionPaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/RenditionPagingList'
    DeletedNodeAllOf2:
      required:
      - archivedAt
      - archivedByUser
      type: object
      properties:
        archivedAt:
          type: string
          format: date-time
        archivedByUser:
          $ref: '#/components/schemas/UserInfo'
    Person:
      required:
      - email
      - enabled
      - firstName
      - id
      type: object
      properties:
        googleId:
          type: string
        lastName:
          type: string
        userStatus:
          type: string
        capabilities:
          $ref: '#/components/schemas/Capabilities'
        displayName:
          type: string
        jobTitle:
          type: string
        statusUpdatedAt:
          type: string
          format: date-time
        mobile:
          type: string
        emailNotificationsEnabled:
          type: boolean
          default: true
        description:
          type: string
        telephone:
          type: string
        enabled:
          type: boolean
          default: true
        aspectNames:
          type: array
          items:
            type: string
        firstName:
          type: string
        skypeId:
          type: string
        avatarId:
          type: string
        instantMessageId:
          type: string
        location:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        id:
          type: string
        email:
          type: string
        properties:
          type: object
          properties: {}
    FavoriteSite:
      required:
      - id
      type: object
      properties:
        id:
          type: string
    SiteContainer:
      required:
      - folderId
      - id
      type: object
      properties:
        id:
          type: string
        folderId:
          type: string
    Site:
      required:
      - guid
      - id
      - title
      - visibility
      type: object
      properties:
        role:
          type: string
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
        visibility:
          type: string
          enum:
          - PRIVATE
          - MODERATED
          - PUBLIC
        guid:
          type: string
        description:
          type: string
        id:
          type: string
        preset:
          type: string
        title:
          type: string
    SiteMembershipRequestBodyUpdate:
      type: object
      properties:
        message:
          type: string
    Group:
      required:
      - displayName
      - id
      - isRoot
      type: object
      properties:
        isRoot:
          type: boolean
          default: true
        displayName:
          type: string
        parentIds:
          type: array
          items:
            type: string
        id:
          type: string
        zones:
          type: array
          items:
            type: string
    GroupMember:
      required:
      - displayName
      - id
      - memberType
      type: object
      properties:
        displayName:
          type: string
        id:
          type: string
        memberType:
          type: string
          enum:
          - GROUP
          - PERSON
    SiteMembershipRequestWithPersonEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/SiteMembershipRequestWithPerson'
    CommentBody:
      required:
      - content
      type: object
      properties:
        content:
          type: string
    SiteMembershipApprovalBody:
      type: object
      properties:
        role:
          type: string
    ActionDefinitionEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/ActionDefinition'
    PersonNetworkPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/PersonNetworkEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    DeletedNodesPagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/DeletedNodeEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    VersionPagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/VersionEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ProbeEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/ProbeEntryEntry'
    NodeChildAssociationPaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/NodeChildAssociationPagingList'
    CommentPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CommentEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ProbeEntryEntry:
      required:
      - message
      type: object
      properties:
        message:
          type: string
    GroupMembershipBodyCreate:
      required:
      - id
      - memberType
      type: object
      properties:
        id:
          type: string
        memberType:
          type: string
          enum:
          - GROUP
          - PERSON
    NodeChildAssociation:
      allOf:
      - $ref: '#/components/schemas/Node'
      - $ref: '#/components/schemas/NodeChildAssociationAllOf2'
    ClientBody:
      required:
      - client
      type: object
      properties:
        client:
          type: string
          description: the client name
    Association:
      required:
      - assocType
      - targetId
      type: object
      properties:
        targetId:
          type: string
        assocType:
          type: string
    DeletedNodeEntry:
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/DeletedNode'
    ChildAssociationEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/ChildAssociation'
    DeletedNode:
      allOf:
      - $ref: '#/components/schemas/Node'
      - $ref: '#/components/schemas/DeletedNodeAllOf2'
    Download:
      type: object
      properties:
        filesAdded:
          type: integer
          description: number of files added so far in the zip
        bytesAdded:
          type: integer
          description: number of bytes added so far in the zip
        totalBytes:
          type: integer
          description: the total number of bytes to be added in the zip
        id:
          type: string
          description: the id of the download node
        totalFiles:
          type: integer
          description: the total number of files to be added in the zip
        status:
          type: string
          description: the current status of the download node creation
          default: PENDING
          enum:
          - PENDING
          - CANCELLED
          - IN_PROGRESS
          - DONE
          - MAX_CONTENT_SIZE_EXCEEDED
    AuditAppEntry:
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/AuditApp'
    Property:
      required:
      - id
      type: object
      properties:
        isProtected:
          type: boolean
          description: define if the property is system maintained
        defaultValue:
          type: string
          description: the default value
        dataType:
          type: string
          description: the name of the property type (e.g. d:text)
        isMultiValued:
          type: boolean
          description: define if the property is multi-valued
        description:
          type: string
          description: the human-readable description
        isMandatoryEnforced:
          type: boolean
          description: define if the presence of mandatory properties is enforced
        id:
          type: string
        title:
          type: string
          description: the human-readable title
        constraints:
          type: array
          description: list of constraints defined for the property
          items:
            $ref: '#/components/schemas/Constraint'
        isMandatory:
          type: boolean
          description: define if the property is mandatory
    SiteMembershipRequestPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SiteMembershipRequestEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    AuditApp:
      required:
      - id
      type: object
      properties:
        maxEntryId:
          type: integer
        isEnabled:
          type: boolean
          default: true
        name:
          type: string
        minEntryId:
          type: integer
        id:
          type: string
    NodeBodyLock:
      type: object
      properties:
        timeToExpire:
          minimum: 0
          type: integer
        lifetime:
          type: string
          default: PERSISTENT
          enum:
          - PERSISTENT
          - EPHEMERAL
        type:
          type: string
          default: ALLOW_OWNER_CHANGES
          enum:
          - ALLOW_OWNER_CHANGES
          - FULL
    NodePagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/NodeEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
        source:
          $ref: '#/components/schemas/Node'
    AssociationBody:
      required:
      - assocType
      - targetId
      type: object
      properties:
        targetId:
          type: string
        assocType:
          type: string
    SiteMembershipRequestWithPersonPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SiteMembershipRequestWithPersonEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    SiteRole:
      required:
      - guid
      - id
      - role
      - site
      type: object
      properties:
        site:
          $ref: '#/components/schemas/Site'
        role:
          type: string
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
        guid:
          type: string
        id:
          type: string
    AssociationInfo:
      required:
      - assocType
      type: object
      properties:
        assocType:
          type: string
    PersonEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Person'
    AuditEntryPaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/AuditEntryPagingList'
    FavoritePaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/FavoritePagingList'
    SharedLink:
      type: object
      properties:
        allowableOperationsOnTarget:
          type: array
          description: |
            The allowable operations for the content node being shared
          items:
            type: string
        modifiedAt:
          type: string
          format: date-time
        description:
          type: string
        title:
          type: string
        expiresAt:
          type: string
          format: date-time
        content:
          $ref: '#/components/schemas/ContentInfo'
        aspectNames:
          type: array
          items:
            type: string
        path:
          $ref: '#/components/schemas/PathInfo'
        modifiedByUser:
          $ref: '#/components/schemas/UserInfo'
        name:
          pattern: "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[\
            \ ]+$))"
          type: string
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name
        id:
          type: string
        nodeId:
          type: string
        sharedByUser:
          $ref: '#/components/schemas/UserInfo'
        allowableOperations:
          type: array
          description: |
            The allowable operations for the Quickshare link itself. See allowableOperationsOnTarget for the
            allowable operations pertaining to the linked content node
          items:
            type: string
        properties:
          type: object
          properties: {}
          description: |
            A subset of the target node's properties, system properties and properties already available in the SharedLink are excluded
        isFavorite:
          type: boolean
    FavoritePagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/FavoriteEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    DirectAccessUrlBodyCreate:
      type: object
      properties:
        validFor:
          minimum: 1
          type: integer
          description: |
            The length of time in seconds that the url is valid for
        expiresAt:
          type: string
          format: date-time
    SiteGroupPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SiteGroupEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Tag:
      required:
      - id
      - tag
      type: object
      properties:
        count:
          type: number
        id:
          type: string
        tag:
          type: string
    SiteEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Site'
    RenditionBodyCreate:
      required:
      - id
      type: object
      properties:
        id:
          type: string
    GroupMemberEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/GroupMember'
    GroupEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Group'
    SiteMembershipRequestWithPersonPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/SiteMembershipRequestWithPersonPagingList'
    Company:
      type: object
      properties:
        address3:
          type: string
        address2:
          type: string
        address1:
          type: string
        organization:
          type: string
        postcode:
          type: string
        telephone:
          type: string
        fax:
          type: string
        email:
          type: string
    NodeChildAssociationAllOf2:
      type: object
      properties:
        association:
          $ref: '#/components/schemas/ChildAssociationInfo'
    PersonNetworkPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/PersonNetworkPagingList'
    ActivityPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/ActivityPagingList'
    NodeAssociation:
      allOf:
      - $ref: '#/components/schemas/Node'
      - $ref: '#/components/schemas/NodeAssociationAllOf2'
    Constraint:
      required:
      - id
      type: object
      properties:
        description:
          type: string
          description: the human-readable constraint description
        id:
          type: string
        type:
          type: string
          description: the type of the constraint
        title:
          type: string
          description: the human-readable constraint title
        parameters:
          type: object
          additionalProperties:
            type: object
            properties: {}
    SiteBodyCreate:
      required:
      - title
      - visibility
      type: object
      properties:
        visibility:
          type: string
          default: PUBLIC
          enum:
          - PUBLIC
          - PRIVATE
          - MODERATED
        description:
          type: string
        id:
          type: string
        title:
          type: string
    SharedLinkEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/SharedLink'
    ActionDefinition:
      required:
      - applicableTypes
      - id
      - trackStatus
      type: object
      properties:
        applicableTypes:
          type: array
          description: QNames of the types this action applies to
          items:
            type: string
        parameterDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/ActionParameterDefinition'
        name:
          type: string
          description: "name of the action definition, e.g. \"move\""
        trackStatus:
          type: boolean
          description: whether the basic action definition supports action tracking
            or not
        description:
          type: string
          description: "describes the action definition, e.g. \"This will move the\
            \ matched item to another space.\""
        id:
          type: string
          description: Identifier of the action definition — used for example when
            executing an action
        title:
          type: string
          description: "title of the action definition, e.g. \"Move\""
    Pagination:
      type: object
      properties:
        maxItems:
          type: integer
          description: |
            The value of the **maxItems** parameter used to generate this list.
            If there was no **maxItems** parameter then the default value is 100
          format: int64
        hasMoreItems:
          type: boolean
          description: |
            A boolean value which is **true** if there are more entities in the collection
            beyond those in this response. A true value means a request with a larger value
            for the **skipCount** or the **maxItems** parameter will return more entities
        totalItems:
          type: integer
          description: |
            An integer describing the total number of entities in the collection.
            The API might not be able to determine this value,
            in which case this property will not be present
          format: int64
        count:
          type: integer
          description: |
            The number of objects in the entries array
          format: int64
        skipCount:
          type: integer
          description: |
            An integer describing how many entities exist in the collection before
            those included in this list. If there was no **skipCount** parameter then the
            default value is 0
          format: int64
    NodeChildAssociationPagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/NodeChildAssociationEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
        source:
          $ref: '#/components/schemas/Node'
    SiteContainerPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/SiteContainerPagingList'
    RatingBody:
      required:
      - id
      - myRating
      type: object
      properties:
        myRating:
          type: string
          description: "The rating. The type is specific to the rating scheme, boolean\
            \ for the likes and an integer for the fiveStar"
        id:
          type: string
          description: The rating scheme type. Possible values are likes and fiveStar
          default: likes
          enum:
          - likes
          - fiveStar
    ContentInfo:
      required:
      - mimeType
      type: object
      properties:
        sizeInBytes:
          type: integer
          format: int64
        mimeTypeName:
          type: string
        mimeType:
          type: string
        encoding:
          type: string
    Version:
      required:
      - id
      - isFile
      - isFolder
      - modifiedAt
      - modifiedByUser
      - name
      - nodeType
      type: object
      properties:
        aspectNames:
          type: array
          items:
            type: string
        isFolder:
          type: boolean
        isFile:
          type: boolean
        modifiedAt:
          type: string
          format: date-time
        modifiedByUser:
          $ref: '#/components/schemas/UserInfo'
        versionComment:
          type: string
        name:
          pattern: "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[\
            \ ]+$))"
          type: string
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name
        id:
          type: string
        nodeType:
          type: string
        content:
          $ref: '#/components/schemas/ContentInfo'
        properties:
          type: object
          properties: {}
    RatingEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Rating'
    NodeBodyMove:
      required:
      - targetParentId
      type: object
      properties:
        targetParentId:
          type: string
        name:
          pattern: "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[\
            \ ]+$))"
          type: string
          description: |
            The name must not contain spaces or the following special characters: * " < > \ / ? : and |.
            The character . must not be used at the end of the name
    PersonNetwork:
      required:
      - id
      - isEnabled
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        paidNetwork:
          type: boolean
        subscriptionLevel:
          type: string
          enum:
          - Free
          - Standard
          - Enterprise
        quotas:
          type: array
          items:
            $ref: '#/components/schemas/NetworkQuota'
        isEnabled:
          type: boolean
        id:
          type: string
          description: This network's unique id
        homeNetwork:
          type: boolean
          description: Is this the home network?
      description: |
        A network is the group of users and sites that belong to an organization.
        Networks are organized by email domain. When a user signs up for an
        Alfresco account , their email domain becomes their Home Network
    AuditBodyUpdate:
      type: object
      properties:
        isEnabled:
          type: boolean
    VersionEntry:
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Version'
    GroupMemberPaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/GroupMemberPagingList'
    SharedLinkPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/SharedLinkPagingList'
    PersonPaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/PersonPagingList'
    DeletedNodeBodyRestore:
      type: object
      properties:
        targetParentId:
          type: string
        assocType:
          type: string
    NodePaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/NodePagingList'
    ActionDefinitionList:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/ActionDefinitionListList'
    PersonBodyCreate:
      required:
      - email
      - firstName
      - id
      - password
      type: object
      properties:
        googleId:
          type: string
        lastName:
          type: string
        userStatus:
          type: string
        jobTitle:
          type: string
        mobile:
          type: string
        emailNotificationsEnabled:
          type: boolean
          default: true
        description:
          type: string
        telephone:
          type: string
        enabled:
          type: boolean
          default: true
        aspectNames:
          type: array
          items:
            type: string
        firstName:
          type: string
        skypeId:
          type: string
        password:
          type: string
        instantMessageId:
          type: string
        location:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        id:
          type: string
        email:
          type: string
        properties:
          type: object
          properties: {}
    SiteMembershipBodyCreate:
      required:
      - id
      - role
      type: object
      properties:
        role:
          type: string
          enum:
          - SiteConsumer
          - SiteCollaborator
          - SiteContributor
          - SiteManager
        id:
          type: string
    RenditionPagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/RenditionEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    SiteRolePagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SiteRoleEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    NodeEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Node'
    CommentEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Comment'
    DownloadBodyCreate:
      required:
      - nodeIds
      type: object
      properties:
        nodeIds:
          type: array
          items:
            type: string
    GroupPaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/GroupPagingList'
    ActionParameterDefinition:
      type: object
      properties:
        displayLabel:
          type: string
        name:
          type: string
        type:
          type: string
        multiValued:
          type: boolean
        mandatory:
          type: boolean
    PermissionElement:
      type: object
      properties:
        authorityId:
          type: string
        name:
          type: string
        accessStatus:
          type: string
          default: ALLOWED
          enum:
          - ALLOWED
          - DENIED
    PersonBodyUpdate:
      type: object
      properties:
        googleId:
          type: string
        lastName:
          type: string
        userStatus:
          type: string
        oldPassword:
          type: string
        jobTitle:
          type: string
        mobile:
          type: string
        emailNotificationsEnabled:
          type: boolean
        description:
          type: string
        telephone:
          type: string
        enabled:
          type: boolean
        aspectNames:
          type: array
          items:
            type: string
        firstName:
          type: string
        skypeId:
          type: string
        password:
          type: string
        instantMessageId:
          type: string
        location:
          type: string
        company:
          $ref: '#/components/schemas/Company'
        email:
          type: string
        properties:
          type: object
          properties: {}
    PreferencePagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/PreferenceEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    GroupMemberPagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/GroupMemberEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    GroupBodyUpdate:
      required:
      - displayName
      type: object
      properties:
        displayName:
          type: string
    CommentPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/CommentPagingList'
    DownloadEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Download'
    SiteContainerEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/SiteContainer'
    Favorite:
      required:
      - target
      - targetGuid
      type: object
      properties:
        targetGuid:
          type: string
          description: The guid of the object that is a favorite
        createdAt:
          type: string
          description: The time the object was made a favorite
          format: date-time
        properties:
          type: object
          properties: {}
          description: "A subset of the target favorite properties, system properties\
            \ and properties already available in the target are excluded"
        target:
          type: object
          properties: {}
      description: |
        A favorite describes an Alfresco entity that a person has marked as a favorite.
        The target can be a site, file or folder
    PermissionsInfo:
      type: object
      properties:
        isInheritanceEnabled:
          type: boolean
        settable:
          type: array
          items:
            type: string
        locallySet:
          type: array
          items:
            $ref: '#/components/schemas/PermissionElement'
        inherited:
          type: array
          items:
            $ref: '#/components/schemas/PermissionElement'
    ChildAssociation:
      required:
      - assocType
      - childId
      type: object
      properties:
        assocType:
          type: string
        childId:
          type: string
    AuditEntryEntry:
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/AuditEntry'
    RatingAggregate:
      required:
      - numberOfRatings
      type: object
      properties:
        average:
          type: integer
        numberOfRatings:
          type: integer
    NodeAssociationEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/NodeAssociation'
    AuditAppPaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/AuditAppPagingList'
    Rating:
      required:
      - aggregate
      - id
      type: object
      properties:
        myRating:
          type: string
          description: "The rating. The type is specific to the rating scheme, boolean\
            \ for the likes and an integer for the fiveStar"
        ratedAt:
          type: string
          format: date-time
        id:
          type: string
        aggregate:
          $ref: '#/components/schemas/RatingAggregate'
      description: |
        A person can rate an item of content by liking it. They can also remove
        their like of an item of content. API methods exist to get a list of
        ratings and to add a new rating
    PermissionsBody:
      type: object
      properties:
        isInheritanceEnabled:
          type: boolean
        locallySet:
          type: array
          items:
            $ref: '#/components/schemas/PermissionElement'
    UserInfo:
      required:
      - displayName
      - id
      type: object
      properties:
        displayName:
          type: string
        id:
          type: string
    SiteGroupEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/SiteGroup'
    SharedLinkBodyEmail:
      type: object
      properties:
        client:
          type: string
        recipientEmails:
          type: array
          items:
            type: string
        message:
          type: string
        locale:
          type: string
    SiteMemberPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/SiteMemberPagingList'
    AuditAppPagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/AuditAppEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    NodeAssociationPagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/NodeAssociationEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
        source:
          $ref: '#/components/schemas/Node'
    TagPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/TagPagingList'
    SiteMembershipRequestPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/SiteMembershipRequestPagingList'
    NetworkQuota:
      required:
      - id
      - limit
      - usage
      type: object
      properties:
        usage:
          type: integer
          format: int64
        limit:
          type: integer
          format: int64
        id:
          type: string
      description: |
        Limits and usage of each quota. A network will have quotas for File space,
        the number of sites in the network, the number of people in the network,
        and the number of network administrators
    PreferenceEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Preference'
    AssociationEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Association'
    SiteMemberPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SiteMemberEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    NodeAssociationAllOf2:
      type: object
      properties:
        association:
          $ref: '#/components/schemas/AssociationInfo'
    ActionExecResult:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the action pending execution
    TagPagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/TagEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    SitePagingList:
      required:
      - entries
      - pagination
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/SiteEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    TagBody:
      required:
      - tag
      type: object
      properties:
        tag:
          type: string
    DeletedNodesPaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/DeletedNodesPagingList'
    Comment:
      required:
      - canDelete
      - canEdit
      - content
      - createdAt
      - createdBy
      - edited
      - id
      - modifiedAt
      - modifiedBy
      - title
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: '#/components/schemas/Person'
        edited:
          type: boolean
        modifiedAt:
          type: string
          format: date-time
        canEdit:
          type: boolean
        modifiedBy:
          $ref: '#/components/schemas/Person'
        canDelete:
          type: boolean
        id:
          type: string
        title:
          type: string
        content:
          type: string
    PersonPagingList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/PersonEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ChildAssociationInfo:
      required:
      - assocType
      - isPrimary
      type: object
      properties:
        isPrimary:
          type: boolean
        assocType:
          type: string
    ActivityEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Activity'
    ErrorError:
      required:
      - briefSummary
      - descriptionURL
      - stackTrace
      - statusCode
      type: object
      properties:
        errorKey:
          type: string
        briefSummary:
          type: string
        descriptionURL:
          type: string
        logId:
          type: string
        stackTrace:
          type: string
        statusCode:
          type: integer
          format: int32
    Error:
      required:
      - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorError'
    FavoriteEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Favorite'
    ActionExecResultEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/ActionExecResult'
    ChildAssociationBody:
      required:
      - assocType
      - childId
      type: object
      properties:
        assocType:
          type: string
        childId:
          type: string
    SiteBodyUpdate:
      type: object
      properties:
        visibility:
          type: string
          enum:
          - PRIVATE
          - MODERATED
          - PUBLIC
        description:
          type: string
        title:
          type: string
    Capabilities:
      type: object
      properties:
        isMutable:
          type: boolean
        isGuest:
          type: boolean
        isAdmin:
          type: boolean
    RevertBody:
      type: object
      properties:
        comment:
          type: string
        majorVersion:
          type: boolean
    NodeChildAssociationEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/NodeChildAssociation'
    VersionPaging:
      type: object
      properties:
        list:
          $ref: '#/components/schemas/VersionPagingList'
    TagEntry:
      required:
      - entry
      type: object
      properties:
        entry:
          $ref: '#/components/schemas/Tag'
    PathInfo:
      type: object
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/PathElement'
        name:
          type: string
        isComplete:
          type: boolean
    RatingPaging:
      required:
      - list
      type: object
      properties:
        list:
          $ref: '#/components/schemas/RatingPagingList'
  parameters:
    actionDefinitionIdParam:
      name: actionDefinitionId
      in: path
      description: The identifier of an action definition
      required: true
      style: simple
      explode: false
      schema:
        type: string
    nodeIdParam:
      name: nodeId
      in: path
      description: The identifier of a node
      required: true
      style: simple
      explode: false
      schema:
        type: string
    nodeIdWithAliasParam:
      name: nodeId
      in: path
      description: |
        The identifier of a node. You can also use one of these well-known aliases:
        * -my-
        * -shared-
        * -root-
      required: true
      style: simple
      explode: false
      schema:
        type: string
    nodeParentIdParam:
      name: nodeId
      in: path
      description: The identifier of a parent node
      required: true
      style: simple
      explode: false
      schema:
        type: string
    nodeParentIdWithAliasParam:
      name: nodeId
      in: path
      description: |
        The identifier of a parent node. You can also use one of these well-known aliases:
        * -my-
        * -shared-
        * -root-
      required: true
      style: simple
      explode: false
      schema:
        type: string
    nodeChildIdWithAliasParam:
      name: nodeId
      in: path
      description: |
        The identifier of a child node. You can also use one of these well-known aliases:
        * -my-
        * -shared-
        * -root-
      required: true
      style: simple
      explode: false
      schema:
        type: string
    nodeSourceIdParam:
      name: nodeId
      in: path
      description: The identifier of a source node
      required: true
      style: simple
      explode: false
      schema:
        type: string
    nodeTargetIdParam:
      name: nodeId
      in: path
      description: The identifier of a target node
      required: true
      style: simple
      explode: false
      schema:
        type: string
    nodeMinimalEntryIncludeParam:
      name: include
      in: query
      description: |
        Returns additional information about the node. The following optional fields can be requested:
        * allowableOperations
        * aspectNames
        * association
        * isLink
        * isFavorite
        * isLocked
        * path
        * properties
        * permissions
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    nodeAssocMinimalEntryIncludeParam:
      name: include
      in: query
      description: |
        Returns additional information about the node. The following optional fields can be requested:
        * allowableOperations
        * aspectNames
        * isLink
        * isFavorite
        * isLocked
        * path
        * properties
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    nodeEntryIncludeParam:
      name: include
      in: query
      description: |
        Returns additional information about the node. The following optional fields can be requested:
        * allowableOperations
        * association
        * isLink
        * isFavorite
        * isLocked
        * path
        * permissions
        * definition
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    groupEntryIncludeParam:
      name: include
      in: query
      description: |
        Returns additional information about the group. The following optional fields can be requested:
        * parentIds
        * zones
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    personMinimalEntryIncludeParam:
      name: include
      in: query
      description: |
        Returns additional information about the person. The following optional fields can be requested:
        * properties
        * aspectNames
        * capabilities
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    tagEntryIncludeParam:
      name: include
      in: query
      description: |
        Returns additional information about the tag. The following optional fields can be requested:
        * count
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    sharedIdParam:
      name: sharedId
      in: path
      description: The identifier of a shared link to a file
      required: true
      style: simple
      explode: false
      schema:
        type: string
    sharedLinkEntryIncludeParam:
      name: include
      in: query
      description: |
        Returns additional information about the shared link, the following optional fields can be requested:
        * allowableOperations
        * path
        * properties
        * isFavorite
        * aspectNames
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    renditionIdParam:
      name: renditionId
      in: path
      description: "The name of a thumbnail rendition, for example *doclib*, or *pdf*"
      required: true
      style: simple
      explode: false
      schema:
        type: string
    versionIdParam:
      name: versionId
      in: path
      description: "The identifier of a version, ie. version label, within the version\
        \ history of a node"
      required: true
      style: simple
      explode: false
      schema:
        type: string
    versionMinimalEntryIncludeParam:
      name: include
      in: query
      description: |
        Returns additional information about the version node. The following optional fields can be requested:
        * properties
        * aspectNames
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    personIdParam:
      name: personId
      in: path
      description: The identifier of a person
      required: true
      style: simple
      explode: false
      schema:
        type: string
    groupIdParam:
      name: groupId
      in: path
      description: The identifier of a group
      required: true
      style: simple
      explode: false
      schema:
        type: string
    groupMemberIdParam:
      name: groupMemberId
      in: path
      description: The identifier of a person or group
      required: true
      style: simple
      explode: false
      schema:
        type: string
    siteIdParam:
      name: siteId
      in: path
      description: The identifier of a site
      required: true
      style: simple
      explode: false
      schema:
        type: string
    inviteeIdParam:
      name: inviteeId
      in: path
      description: The invitee user name
      required: true
      style: simple
      explode: false
      schema:
        type: string
    tagIdParam:
      name: tagId
      in: path
      description: The identifier of a tag
      required: true
      style: simple
      explode: false
      schema:
        type: string
    networkIdParam:
      name: networkId
      in: path
      description: The identifier of a network
      required: true
      style: simple
      explode: false
      schema:
        type: string
    commentIdParam:
      name: commentId
      in: path
      description: The identifier of a comment
      required: true
      style: simple
      explode: false
      schema:
        type: string
    ratingIdParam:
      name: ratingId
      in: path
      description: The identifier of a rating
      required: true
      style: simple
      explode: false
      schema:
        type: string
    favoriteIdParam:
      name: favoriteId
      in: path
      description: The identifier of a favorite
      required: true
      style: simple
      explode: false
      schema:
        type: string
    skipCountParam:
      name: skipCount
      in: query
      description: |
        The number of entities that exist in the collection before those included in this list.
        If not supplied then the default value is 0
      required: false
      style: form
      explode: true
      schema:
        minimum: 0
        type: integer
        default: 0
    omitTotalItemsParam:
      name: omitTotalItems
      in: query
      description: |
        A boolean to control if the response provides the total numbers of items in the collection.
        If not supplied then the default value is false
      required: false
      style: form
      explode: true
      schema:
        type: boolean
        default: false
    maxItemsParam:
      name: maxItems
      in: query
      description: |
        The maximum number of items to return in the list.
        If not supplied then the default value is 100
      required: false
      style: form
      explode: true
      schema:
        minimum: 1
        type: integer
        default: 100
    fieldsParam:
      name: fields
      in: query
      description: |
        A list of field names.

        You can use this parameter to restrict the fields
        returned within a response if, for example, you want to save on overall bandwidth.

        The list applies to a returned individual
        entity or entries within a collection.

        If the API method also supports the **include**
        parameter, then the fields specified in the **include**
        parameter are returned in addition to those specified in the **fields** parameter
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    orderByParam:
      name: orderBy
      in: query
      description: |
        A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to
        sort the list by one or more fields.

        Each field has a default sort order, which is normally ascending order. Read the API method implementation notes
        above to check if any fields used in this method have a descending default search order.

        To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    whereParam:
      name: where
      in: query
      description: A string to restrict the returned objects by using a predicate
      required: false
      style: form
      explode: true
      schema:
        type: string
    includeSourceParam:
      name: includeSource
      in: query
      description: Also include **source** (in addition to **entries**) with folder
        information on **nodeId**
      required: false
      style: form
      explode: true
      schema:
        type: boolean
    relationsParam:
      name: relations
      in: query
      description: Use the relations parameter to include one or more related entities
        in a single response
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    attachmentParam:
      name: attachment
      in: query
      description: |
        **true** enables a web browser to download the file as an attachment.
        **false** means a web browser may preview the file in a new tab or window, but not
        download the file.

        You can only set this parameter to **false** if the content type of the file is in the supported list;
        for example, certain image files and PDF files.

        If the content type is not supported for preview, then a value of **false**  is ignored, and
        the attachment will be returned in the response
      required: false
      style: form
      explode: true
      schema:
        type: boolean
        default: true
    ifModifiedSinceHeader:
      name: If-Modified-Since
      in: header
      description: |
        Only returns the content if it has been modified since the date provided.
        Use the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`
      required: false
      style: simple
      explode: false
      schema:
        type: string
        format: date-time
      x-ballerina-name: ifModifiedSince
    RangeHeader:
      name: Range
      in: header
      description: |
        The Range header indicates the part of a document that the server should return.
        Single part request supported, for example: bytes=1-10
      required: false
      style: simple
      explode: false
      schema:
        type: string
        format: bytes
      x-ballerina-name: range
    downloadIdParam:
      name: downloadId
      in: path
      description: The identifier of a download node
      required: true
      style: simple
      explode: false
      schema:
        type: string
    favoriteEntryIncludeParam:
      name: include
      in: query
      description: |
        Returns additional information about favorites, the following optional fields can be requested:
        * path (note, this only applies to files and folders)
        * properties
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    auditApplicationIdParam:
      name: auditApplicationId
      in: path
      description: The identifier of an audit application
      required: true
      style: simple
      explode: false
      schema:
        type: string
    auditApplicationIncludeParam:
      name: include
      in: query
      description: |
        Also include the current minimum and/or maximum audit entry ids for the application. The following optional fields can be requested:
        * max
        * min
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    auditEntryIdParam:
      name: auditEntryId
      in: path
      description: The identifier of an audit entry
      required: true
      style: simple
      explode: false
      schema:
        type: string
    auditMinimalEntryIncludeParam:
      name: include
      in: query
      description: |
        Returns additional information about the audit entry. The following optional fields can be requested:
        * values
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
  securitySchemes:
    basicAuth:
      type: http
      description: HTTP Basic Authentication
      scheme: basic
x-original-swagger-version: "2.0"
